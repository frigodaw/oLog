
oLog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00001df6  00001e8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001df6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000466  00800174  00800174  00001efe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001efe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001d58  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003f16e  00000000  00000000  00003cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027f5  00000000  00000000  00042e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ae91  00000000  00000000  0004562b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000af08  00000000  00000000  000504bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000ec0c  00000000  00000000  0005b3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000456c4  00000000  00000000  00069fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001d48  00000000  00000000  000af694  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__ctors_end>
       4:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
       8:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
       c:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      10:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      14:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      18:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      1c:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      20:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      24:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      28:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      2c:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      30:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      34:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      38:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      3c:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      40:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      44:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      48:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      4c:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      50:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      54:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      58:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      5c:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      60:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>
      64:	0c 94 9b 04 	jmp	0x936	; 0x936 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	bf 00       	.word	0x00bf	; ????
      6a:	03 02       	muls	r16, r19
      6c:	04 04       	cpc	r0, r4
      6e:	02 04       	cpc	r0, r2
      70:	05 0b       	sbc	r16, r21
      72:	0d ff       	.word	0xff0d	; ????
      74:	fe 08       	sbc	r15, r14
      76:	fe 08       	sbc	r15, r14
      78:	fe 01       	movw	r30, r28
      7a:	55 02       	muls	r21, r21
      7c:	bf 08       	sbc	r11, r15
      7e:	76 20       	and	r7, r6
      80:	05 00       	.word	0x0005	; ????
      82:	e6 04       	cpc	r14, r6
      84:	21 06       	cpc	r2, r17
      86:	81 e3       	ldi	r24, 0x31	; 49
      88:	c4 25       	eor	r28, r4
      8a:	22 07       	cpc	r18, r18
      8c:	23 3b       	cpi	r18, 0xB3	; 179
      8e:	45 a2       	std	Z+37, r4	; 0x25
      90:	04 23       	and	r16, r20
      92:	10 76       	andi	r17, 0x60	; 96
      94:	a2 55       	subi	r26, 0x52	; 82
      96:	92 25       	eor	r25, r2
      98:	d1 20       	and	r13, r1
      9a:	25 c9       	rjmp	.-3510   	; 0xfffff2e6 <__eeprom_end+0xff7ef2e6>
      9c:	20 25       	eor	r18, r0
      9e:	59 12       	cpse	r5, r25
      a0:	01 24       	eor	r0, r1
      a2:	10 a5       	ldd	r17, Z+40	; 0x28
      a4:	9e 55       	subi	r25, 0x5E	; 94
      a6:	b6 54       	subi	r27, 0x46	; 70
      a8:	94 6c       	ori	r25, 0xC4	; 196
      aa:	4b a2       	std	Y+35, r4	; 0x23
      ac:	44 a9       	ldd	r20, Z+52	; 0x34
      ae:	6c 11       	cpse	r22, r12
      b0:	00 25       	eor	r16, r0
      b2:	11 88       	ldd	r1, Z+17	; 0x11
      b4:	62 8e       	std	Z+26, r6	; 0x1a
      b6:	d4 92       	xch	Z, r13
      b8:	29 39       	cpi	r18, 0x99	; 153
      ba:	10 e7       	ldi	r17, 0x70	; 112
      bc:	40 a2       	std	Z+32, r4	; 0x20
      be:	25 51       	subi	r18, 0x15	; 21
      c0:	49 01       	movw	r8, r18
      c2:	26 0d       	add	r18, r6
      c4:	86 23       	and	r24, r22
      c6:	8e 16       	cp	r8, r30
      c8:	b5 69       	ori	r27, 0x95	; 149
      ca:	51 a2       	std	Z+33, r5	; 0x21
      cc:	25 91       	lpm	r18, Z+
      ce:	29 27       	eor	r18, r25
      d0:	06 21       	and	r16, r6
      d2:	ba 84       	ldd	r11, Y+10	; 0x0a
      d4:	00 28       	or	r0, r0
      d6:	0b a3       	std	Y+35, r16	; 0x23
      d8:	1a 55       	subi	r17, 0x5A	; 90
      da:	12 25       	eor	r17, r2
      dc:	51 5b       	subi	r21, 0xB1	; 177
      de:	94 05       	cpc	r25, r4
      e0:	29 0c       	add	r2, r9
      e2:	a3 1b       	sub	r26, r19
      e4:	45 16       	cp	r4, r21
      e6:	65 51       	subi	r22, 0x15	; 21
      e8:	4b 94       	des	4
      ea:	44 00       	.word	0x0044	; ????
      ec:	2a 07       	cpc	r18, r26
      ee:	33 36       	cpi	r19, 0x63	; 99
      f0:	45 d2       	rcall	.+1162   	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
      f2:	01 2b       	or	r16, r17
      f4:	0a 55       	subi	r16, 0x5A	; 90
      f6:	a6 55       	subi	r26, 0x56	; 86
      f8:	18 0d       	add	r17, r8
      fa:	52 18       	sub	r5, r2
      fc:	01 2c       	mov	r0, r1
      fe:	07 32       	cpi	r16, 0x27	; 39
     100:	da 4c       	sbci	r29, 0xCA	; 202
     102:	a2 00       	.word	0x00a2	; ????
     104:	2d 06       	cpc	r2, r29
     106:	13 2e       	mov	r1, r19
     108:	c5 00       	.word	0x00c5	; ????
     10a:	2e 06       	cpc	r2, r30
     10c:	11 e3       	ldi	r17, 0x31	; 49
     10e:	44 00       	.word	0x0044	; ????
     110:	2f 0a       	sbc	r2, r31
     112:	83 e2       	ldi	r24, 0x23	; 35
     114:	54 25       	eor	r21, r4
     116:	6a 89       	ldd	r22, Y+18	; 0x12
     118:	22 00       	.word	0x0022	; ????
     11a:	30 0a       	sbc	r3, r16
     11c:	85 a2       	std	Z+37, r8	; 0x25
     11e:	cd 92       	st	X+, r12
     120:	f9 96       	adiw	r30, 0x39	; 57
     122:	2c 00       	.word	0x002c	; ????
     124:	31 07       	cpc	r19, r17
     126:	82 a3       	std	Z+34, r24	; 0x22
     128:	cd d2       	rcall	.+1434   	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
     12a:	07 32       	cpi	r16, 0x27	; 39
     12c:	0c 85       	ldd	r16, Y+12	; 0x0c
     12e:	a2 cd       	rjmp	.-1212   	; 0xfffffc74 <__eeprom_end+0xff7efc74>
     130:	92 85       	ldd	r25, Z+10	; 0x0a
     132:	25 29       	or	r18, r5
     134:	0b 07       	cpc	r16, r27
     136:	01 33       	cpi	r16, 0x31	; 49
     138:	0c 85       	ldd	r16, Y+12	; 0x0c
     13a:	a2 cd       	rjmp	.-1212   	; 0xfffffc80 <__eeprom_end+0xff7efc80>
     13c:	92 85       	ldd	r25, Z+10	; 0x0a
     13e:	91 1a       	sub	r9, r17
     140:	6a c9       	rjmp	.-3372   	; 0xfffff416 <__eeprom_end+0xff7ef416>
     142:	02 34       	cpi	r16, 0x42	; 66
     144:	0e 85       	ldd	r16, Y+14	; 0x0e
     146:	a2 5d       	subi	r26, 0xD2	; 210
     148:	26 25       	eor	r18, r6
     14a:	51 52       	subi	r21, 0x21	; 33
     14c:	4a 06       	cpc	r4, r26
     14e:	2d 4c       	sbci	r18, 0xCD	; 205
     150:	00 35       	cpi	r16, 0x50	; 80
     152:	0c 85       	ldd	r16, Y+12	; 0x0c
     154:	a2 cd       	rjmp	.-1212   	; 0xfffffc9a <__eeprom_end+0xff7efc9a>
     156:	90 84       	ldd	r9, Z+8	; 0x08
     158:	e1 1a       	sub	r14, r17
     15a:	6a c9       	rjmp	.-3372   	; 0xfffff430 <__eeprom_end+0xff7ef430>
     15c:	02 36       	cpi	r16, 0x62	; 98
     15e:	0c 85       	ldd	r16, Y+12	; 0x0c
     160:	a2 cd       	rjmp	.-1212   	; 0xfffffca6 <__eeprom_end+0xff7efca6>
     162:	92 89       	ldd	r25, Z+18	; 0x12
     164:	43 92       	.word	0x9243	; ????
     166:	d9 92       	st	Y+, r13
     168:	05 37       	cpi	r16, 0x75	; 117
     16a:	0b 85       	ldd	r16, Y+11	; 0x0b
     16c:	a2 c5       	rjmp	.+2884   	; 0xcb2 <u8g2_font_decode_len+0x20>
     16e:	20 66       	ori	r18, 0x60	; 96
     170:	c5 2c       	mov	r12, r5
     172:	ac 01       	movw	r20, r24
     174:	38 0c       	add	r3, r8
     176:	85 a2       	std	Z+37, r8	; 0x25
     178:	cd 92       	st	X+, r12
     17a:	69 c9       	rjmp	.-3374   	; 0xfffff44e <__eeprom_end+0xff7ef44e>
     17c:	92 d9       	rcall	.-3292   	; 0xfffff4a2 <__eeprom_end+0xff7ef4a2>
     17e:	92 05       	cpc	r25, r2
     180:	39 0c       	add	r3, r9
     182:	85 a2       	std	Z+37, r8	; 0x25
     184:	cd 92       	st	X+, r12
     186:	d9 92       	st	Y+, r13
     188:	21 d4       	rcall	.+2114   	; 0x9cc <u8g2_send_buffer+0x64>
     18a:	92 05       	cpc	r25, r2
     18c:	3a 06       	cpc	r3, r26
     18e:	61 e3       	ldi	r22, 0x31	; 49
     190:	44 18       	sub	r4, r4
     192:	3b 09       	sbc	r19, r11
     194:	82 da       	rcall	.-2812   	; 0xfffff69a <__eeprom_end+0xff7ef69a>
     196:	4c 0e       	add	r4, r28
     198:	25 0a       	sbc	r2, r21
     19a:	00 3c       	cpi	r16, 0xC0	; 192
     19c:	07 53       	subi	r16, 0x37	; 55
     19e:	a7 55       	subi	r26, 0x57	; 87
     1a0:	52 2b       	or	r21, r18
     1a2:	3d 08       	sbc	r3, r13
     1a4:	34 6a       	ori	r19, 0xA4	; 164
     1a6:	c5 10       	cpse	r12, r5
     1a8:	0e 01       	movw	r0, r28
     1aa:	3e 08       	sbc	r3, r14
     1ac:	53 a7       	std	Z+43, r21	; 0x2b
     1ae:	45 56       	subi	r20, 0x65	; 101
     1b0:	29 01       	movw	r4, r18
     1b2:	3f 0c       	add	r3, r15
     1b4:	84 a3       	std	Z+36, r24	; 0x24
     1b6:	8d 12       	cpse	r8, r29
     1b8:	65 51       	subi	r22, 0x15	; 21
     1ba:	2d 07       	cpc	r18, r29
     1bc:	22 00       	.word	0x0022	; ????
     1be:	40 16       	cp	r4, r16
     1c0:	9a de       	rcall	.-716    	; 0xfffffef6 <__eeprom_end+0xff7efef6>
     1c2:	de 20       	and	r13, r14
     1c4:	a6 51       	subi	r26, 0x16	; 22
     1c6:	a4 24       	eor	r10, r4
     1c8:	52 49       	sbci	r21, 0x92	; 146
     1ca:	c9 22       	and	r12, r25
     1cc:	25 aa       	std	Z+53, r2	; 0x35
     1ce:	44 8a       	std	Z+20, r4	; 0x14
     1d0:	96 63       	ori	r25, 0x36	; 54
     1d2:	83 06       	cpc	r8, r19
     1d4:	41 0e       	add	r4, r17
     1d6:	87 e2       	ldi	r24, 0x27	; 39
     1d8:	5d 9c       	mul	r5, r13
     1da:	26 61       	ori	r18, 0x16	; 22
     1dc:	92 95       	swap	r25
     1de:	06 25       	eor	r16, r6
     1e0:	55 03       	mulsu	r21, r21
     1e2:	42 0d       	add	r20, r2
     1e4:	85 e3       	ldi	r24, 0x35	; 53
     1e6:	c5 90       	lpm	r12, Z+
     1e8:	64 da       	rcall	.-2872   	; 0xfffff6b2 <__eeprom_end+0xff7ef6b2>
     1ea:	a0 64       	ori	r26, 0x40	; 64
     1ec:	b6 41       	sbci	r27, 0x16	; 22
     1ee:	01 43       	sbci	r16, 0x31	; 49
     1f0:	0c 86       	std	Y+12, r0	; 0x0c
     1f2:	23 ce       	rjmp	.-954    	; 0xfffffe3a <__eeprom_end+0xff7efe3a>
     1f4:	90 84       	ldd	r9, Z+8	; 0x08
     1f6:	6a c7       	rjmp	.+3796   	; 0x10cc <u8g2_DrawGlyph+0x6c>
     1f8:	64 48       	sbci	r22, 0x84	; 132
     1fa:	00 44       	sbci	r16, 0x40	; 64
     1fc:	0d 86       	std	Y+13, r0	; 0x0d
     1fe:	23 c6       	rjmp	.+3142   	; 0xe46 <u8g2_font_decode_glyph+0x80>
     200:	10 65       	ori	r17, 0x50	; 80
     202:	49 e8       	ldi	r20, 0x89	; 137
     204:	2d 19       	sub	r18, r13
     206:	22 00       	.word	0x0022	; ????
     208:	45 0a       	sbc	r4, r21
     20a:	85 e3       	ldi	r24, 0x35	; 53
     20c:	c5 31       	cpi	r28, 0x15	; 21
     20e:	1c c6       	rjmp	.+3128   	; 0xe48 <u8g2_font_decode_glyph+0x82>
     210:	e2 20       	and	r14, r2
     212:	46 0a       	sbc	r4, r22
     214:	85 a3       	std	Z+37, r24	; 0x25
     216:	c5 31       	cpi	r28, 0x15	; 21
     218:	1c 92       	st	X, r1
     21a:	b0 11       	cpse	r27, r0
     21c:	47 0c       	add	r4, r7
     21e:	86 23       	and	r24, r22
     220:	ce 90       	ld	r12, -X
     222:	84 6a       	ori	r24, 0xA4	; 164
     224:	6d 14       	cp	r6, r13
     226:	93 41       	sbci	r25, 0x13	; 19
     228:	48 0a       	sbc	r4, r24
     22a:	86 23       	and	r24, r22
     22c:	46 68       	ori	r20, 0x86	; 134
     22e:	1c 06       	cpc	r1, r28
     230:	d1 31       	cpi	r29, 0x11	; 17
     232:	49 06       	cpc	r4, r25
     234:	81 e3       	ldi	r24, 0x31	; 49
     236:	c4 41       	sbci	r28, 0x14	; 20
     238:	4a 09       	sbc	r20, r10
     23a:	84 62       	ori	r24, 0x24	; 36
     23c:	5d 6f       	ori	r21, 0xFD	; 253
     23e:	52 a2       	std	Z+34, r5	; 0x22
     240:	00 4b       	sbci	r16, 0xB0	; 176
     242:	0d 85       	ldd	r16, Y+13	; 0x0d
     244:	e3 45       	sbci	r30, 0x53	; 83
     246:	26 25       	eor	r18, r6
     248:	a5 a9       	ldd	r26, Z+53	; 0x35
     24a:	12 25       	eor	r17, r2
     24c:	99 16       	cp	r9, r25
     24e:	4c 08       	sbc	r4, r12
     250:	84 a3       	std	Z+36, r24	; 0x24
     252:	45 d6       	rcall	.+3210   	; 0xede <u8g2_font_decode_glyph+0x118>
     254:	b7 21       	and	r27, r7
     256:	4d 10       	cpse	r4, r13
     258:	87 63       	ori	r24, 0x37	; 55
     25a:	46 ba       	out	0x16, r4	; 22
     25c:	0d d9       	rcall	.-3558   	; 0xfffff478 <__eeprom_end+0xff7ef478>
     25e:	52 51       	subi	r21, 0x12	; 18
     260:	2a 52       	subi	r18, 0x2A	; 42
     262:	24 45       	sbci	r18, 0x54	; 84
     264:	52 01       	movw	r10, r4
     266:	4e 0f       	add	r20, r30
     268:	86 23       	and	r24, r22
     26a:	86 b6       	in	r8, 0x36	; 54
     26c:	29 91       	ld	r18, Y+
     26e:	12 49       	sbci	r17, 0x92	; 146
     270:	89 94       	.word	0x9489	; ????
     272:	68 9b       	sbis	0x0d, 0	; 13
     274:	00 4f       	sbci	r16, 0xF0	; 240
     276:	0b 86       	std	Y+11, r0	; 0x0b
     278:	23 ce       	rjmp	.-954    	; 0xfffffec0 <__eeprom_end+0xff7efec0>
     27a:	90 84       	ldd	r9, Z+8	; 0x08
     27c:	3e 26       	eor	r3, r30
     27e:	43 02       	muls	r20, r19
     280:	50 0c       	add	r5, r0
     282:	85 e3       	ldi	r24, 0x35	; 53
     284:	c5 90       	lpm	r12, Z+
     286:	64 da       	rcall	.-2872   	; 0xfffff750 <__eeprom_end+0xff7ef750>
     288:	a0 84       	ldd	r10, Z+8	; 0x08
     28a:	8d 00       	.word	0x008d	; ????
     28c:	51 12       	cpse	r5, r17
     28e:	97 1f       	adc	r25, r23
     290:	ce 10       	cpse	r12, r14
     292:	85 49       	sbci	r24, 0x95	; 149
     294:	98 84       	ldd	r9, Y+8	; 0x08
     296:	49 98       	cbi	0x09, 1	; 9
     298:	44 49       	sbci	r20, 0x94	; 148
     29a:	4d 1a       	sub	r4, r29
     29c:	74 20       	and	r7, r4
     29e:	52 0c       	add	r5, r2
     2a0:	85 e3       	ldi	r24, 0x35	; 53
     2a2:	c5 90       	lpm	r12, Z+
     2a4:	64 da       	rcall	.-2872   	; 0xfffff76e <__eeprom_end+0xff7ef76e>
     2a6:	a0 64       	ori	r26, 0x40	; 64
     2a8:	6e 01       	movw	r12, r28
     2aa:	53 0c       	add	r5, r3
     2ac:	85 e3       	ldi	r24, 0x35	; 53
     2ae:	cd 92       	st	X+, r12
     2b0:	a9 ab       	std	Y+49, r26	; 0x31
     2b2:	a6 25       	eor	r26, r6
     2b4:	0b 00       	.word	0x000b	; ????
     2b6:	54 09       	sbc	r21, r4
     2b8:	85 62       	ori	r24, 0x25	; 37
     2ba:	c5 20       	and	r12, r5
     2bc:	85 7d       	andi	r24, 0xD5	; 213
     2be:	02 55       	subi	r16, 0x52	; 82
     2c0:	0a 86       	std	Y+10, r0	; 0x0a
     2c2:	23 46       	sbci	r18, 0x63	; 99
     2c4:	e8 c7       	rjmp	.+4048   	; 0x1296 <u8g2_DrawHVLine+0x34>
     2c6:	64 48       	sbci	r22, 0x84	; 132
     2c8:	00 56       	subi	r16, 0x60	; 96
     2ca:	0f 87       	std	Y+15, r16	; 0x0f
     2cc:	e2 45       	sbci	r30, 0x52	; 82
     2ce:	aa 26       	eor	r10, r26
     2d0:	59 94       	.word	0x9459	; ????
     2d2:	45 59       	subi	r20, 0x95	; 149
     2d4:	25 4c       	sbci	r18, 0xC5	; 197
     2d6:	d2 0c       	add	r13, r2
     2d8:	57 10       	cpse	r5, r7
     2da:	89 62       	ori	r24, 0x29	; 41
     2dc:	46 96       	adiw	r24, 0x16	; 22
     2de:	69 95       	.word	0x9569	; ????
     2e0:	a8 2f       	mov	r26, r24
     2e2:	6d c5       	rjmp	.+2778   	; 0xdbe <u8g2_font_decode_len+0x12c>
     2e4:	2c cc       	rjmp	.-1960   	; 0xfffffb3e <__eeprom_end+0xff7efb3e>
     2e6:	22 00       	.word	0x0022	; ????
     2e8:	58 0d       	add	r21, r8
     2ea:	85 e3       	ldi	r24, 0x35	; 53
     2ec:	45 a6       	std	Z+45, r4	; 0x2d
     2ee:	25 b5       	in	r18, 0x25	; 37
     2f0:	4a 94       	dec	r4
     2f2:	d4 b4       	in	r13, 0x24	; 36
     2f4:	00 59       	subi	r16, 0x90	; 144
     2f6:	0e 87       	std	Y+14, r16	; 0x0e
     2f8:	e2 45       	sbci	r30, 0x52	; 82
     2fa:	9a 64       	ori	r25, 0x4A	; 74
     2fc:	51 56       	subi	r21, 0x61	; 97
     2fe:	09 93       	st	Y+, r16
     300:	34 ae       	std	Z+60, r3	; 0x3c
     302:	01 5a       	subi	r16, 0xA1	; 161
     304:	0b 85       	ldd	r16, Y+11	; 0x0b
     306:	e3 c5       	rjmp	.+3014   	; 0xece <u8g2_font_decode_glyph+0x108>
     308:	20 66       	ori	r18, 0x60	; 96
     30a:	c5 ac       	ldd	r12, Z+61	; 0x3d
     30c:	38 08       	sbc	r3, r8
     30e:	5b 08       	sbc	r5, r11
     310:	a2 db       	rcall	.-2236   	; 0xfffffa56 <__eeprom_end+0xff7efa56>
     312:	c4 d2       	rcall	.+1416   	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
     314:	2f 02       	muls	r18, r31
     316:	5c 0a       	sbc	r5, r28
     318:	83 e2       	ldi	r24, 0x23	; 35
     31a:	44 94       	.word	0x9444	; ????
     31c:	45 6d       	ori	r20, 0xD5	; 213
     31e:	51 00       	.word	0x0051	; ????
     320:	5d 08       	sbc	r5, r13
     322:	a2 da       	rcall	.-2748   	; 0xfffff868 <__eeprom_end+0xff7ef868>
     324:	84 d2       	rcall	.+1288   	; 0x82e <__LOCK_REGION_LENGTH__+0x42e>
     326:	2f 03       	fmul	r18, r23
     328:	5e 0a       	sbc	r5, r30
     32a:	55 ae       	std	Z+61, r5	; 0x3d
     32c:	55 98       	cbi	0x0a, 5	; 10
     32e:	25 51       	subi	r18, 0x15	; 21
     330:	52 0b       	sbc	r21, r18
     332:	5f 06       	cpc	r5, r31
     334:	16 9a       	sbi	0x02, 6	; 2
     336:	c5 01       	movw	r24, r10
     338:	60 06       	cpc	r6, r16
     33a:	22 fe       	sbrs	r2, 2
     33c:	44 14       	cp	r4, r4
     33e:	61 0c       	add	r6, r1
     340:	65 62       	ori	r22, 0x25	; 37
     342:	c5 1a       	sub	r12, r21
     344:	2d 51       	subi	r18, 0x1D	; 29
     346:	12 45       	sbci	r17, 0x52	; 82
     348:	4a 00       	.word	0x004a	; ????
     34a:	62 0c       	add	r6, r2
     34c:	85 a2       	std	Z+37, r8	; 0x25
     34e:	45 58       	subi	r20, 0x85	; 133
     350:	31 69       	ori	r19, 0x91	; 145
     352:	da a4       	ldd	r13, Y+42	; 0x2a
     354:	28 00       	.word	0x0028	; ????
     356:	63 0a       	sbc	r6, r19
     358:	64 62       	ori	r22, 0x24	; 36
     35a:	8d 12       	cpse	r8, r29
     35c:	69 a5       	ldd	r22, Y+41	; 0x29
     35e:	44 01       	movw	r8, r8
     360:	64 0a       	sbc	r6, r20
     362:	85 a2       	std	Z+37, r8	; 0x25
     364:	65 c5       	rjmp	.+2762   	; 0xe30 <u8g2_font_decode_glyph+0x6a>
     366:	b4 99       	sbic	0x16, 4	; 22
     368:	14 25       	eor	r17, r4
     36a:	65 0b       	sbc	r22, r21
     36c:	64 62       	ori	r22, 0x24	; 36
     36e:	8d 12       	cpse	r8, r29
     370:	0d 5b       	subi	r16, 0xBD	; 189
     372:	94 28       	or	r9, r4
     374:	00 66       	ori	r16, 0x60	; 96
     376:	0a 84       	ldd	r0, Y+10	; 0x0a
     378:	22 95       	swap	r18
     37a:	12 4d       	sbci	r17, 0xD2	; 210
     37c:	59 27       	eor	r21, r25
     37e:	00 67       	ori	r16, 0x70	; 112
     380:	0c 85       	ldd	r16, Y+12	; 0x0c
     382:	9a 8d       	ldd	r25, Y+26	; 0x1a
     384:	69 33       	cpi	r22, 0x39	; 57
     386:	29 4a       	sbci	r18, 0xA9	; 169
     388:	98 2c       	mov	r9, r8
     38a:	00 68       	ori	r16, 0x80	; 128
     38c:	0a 85       	ldd	r16, Y+10	; 0x0a
     38e:	a2 45       	sbci	r26, 0x52	; 82
     390:	58 31       	cpi	r21, 0x18	; 24
     392:	69 6e       	ori	r22, 0xE9	; 233
     394:	01 69       	ori	r16, 0x91	; 145
     396:	07 81       	ldd	r16, Z+7	; 0x07
     398:	a2 44       	sbci	r26, 0x42	; 66
     39a:	32 0c       	add	r3, r2
     39c:	6a 09       	sbc	r22, r10
     39e:	a2 99       	sbic	0x14, 2	; 20
     3a0:	4c 96       	adiw	r24, 0x1c	; 28
     3a2:	f4 a2       	std	Z+36, r15	; 0x24
     3a4:	00 6b       	ori	r16, 0xB0	; 176
     3a6:	0c 84       	ldd	r0, Y+12	; 0x0c
     3a8:	62 45       	sbci	r22, 0x52	; 82
     3aa:	56 52       	subi	r21, 0x26	; 38
     3ac:	12 29       	or	r17, r2
     3ae:	29 49       	sbci	r18, 0x99	; 153
     3b0:	01 6c       	ori	r16, 0xC1	; 193
     3b2:	06 81       	ldd	r16, Z+6	; 0x06
     3b4:	a2 c4       	rjmp	.+2372   	; 0xcfa <u8g2_font_decode_len+0x68>
     3b6:	41 6d       	ori	r20, 0xD1	; 209
     3b8:	0e 67       	ori	r16, 0x7E	; 126
     3ba:	22 c6       	rjmp	.+3140   	; 0x1000 <u8g2_font_get_glyph_data+0xc6>
     3bc:	a2 44       	sbci	r26, 0x42	; 66
     3be:	91 14       	cp	r9, r1
     3c0:	49 91       	ld	r20, Y+
     3c2:	14 49       	sbci	r17, 0x94	; 148
     3c4:	05 6e       	ori	r16, 0xE5	; 229
     3c6:	09 65       	ori	r16, 0x59	; 89
     3c8:	a2 45       	sbci	r26, 0x52	; 82
     3ca:	62 d2       	rcall	.+1220   	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
     3cc:	dc 02       	muls	r29, r28
     3ce:	6f 0a       	sbc	r6, r31
     3d0:	65 a2       	std	Z+37, r6	; 0x25
     3d2:	cd 92       	st	X+, r12
     3d4:	b9 25       	eor	r27, r9
     3d6:	0b 00       	.word	0x000b	; ????
     3d8:	70 0c       	add	r7, r0
     3da:	85 9a       	sbi	0x10, 5	; 16
     3dc:	45 62       	ori	r20, 0x25	; 37
     3de:	d2 b4       	in	r13, 0x22	; 34
     3e0:	49 51       	subi	r20, 0x19	; 25
     3e2:	c2 10       	cpse	r12, r2
     3e4:	71 0a       	sbc	r7, r17
     3e6:	85 9a       	sbi	0x10, 5	; 16
     3e8:	8d 69       	ori	r24, 0x9D	; 157
     3ea:	33 29       	or	r19, r3
     3ec:	4a 58       	subi	r20, 0x8A	; 138
     3ee:	72 09       	sbc	r23, r2
     3f0:	63 22       	and	r6, r19
     3f2:	45 b2       	in	r4, 0x15	; 21
     3f4:	44 4d       	sbci	r20, 0xD4	; 212
     3f6:	00 73       	andi	r16, 0x30	; 48
     3f8:	0b 64       	ori	r16, 0x4B	; 75
     3fa:	62 8d       	ldd	r22, Z+26	; 0x1a
     3fc:	12 25       	eor	r17, r2
     3fe:	a2 94       	swap	r10
     400:	28 00       	.word	0x0028	; ????
     402:	74 0a       	sbc	r7, r20
     404:	83 22       	and	r8, r19
     406:	4d 94 2c 51 	jmp	0x12a258	; 0x12a258 <__TEXT_REGION_LENGTH__+0x10a258>
     40a:	93 00       	.word	0x0093	; ????
     40c:	75 08       	sbc	r7, r5
     40e:	64 62       	ori	r22, 0x24	; 36
     410:	45 e4       	ldi	r20, 0x45	; 69
     412:	29 19       	sub	r18, r9
     414:	76 0c       	add	r7, r6
     416:	65 a2       	std	Z+37, r6	; 0x25
     418:	45 a6       	std	Z+45, r4	; 0x2d
     41a:	25 a5       	ldd	r18, Z+45	; 0x2d
     41c:	24 0b       	sbc	r18, r20
     41e:	23 00       	.word	0x0023	; ????
     420:	77 0e       	add	r7, r23
     422:	67 22       	and	r6, r23
     424:	46 14       	cp	r4, r6
     426:	49 95       	.word	0x9549	; ????
     428:	a6 a4       	ldd	r10, Z+46	; 0x2e
     42a:	96 84       	ldd	r9, Z+14	; 0x0e
     42c:	49 04       	cpc	r4, r9
     42e:	78 0a       	sbc	r7, r24
     430:	65 a2       	std	Z+37, r6	; 0x25
     432:	45 96       	adiw	r24, 0x15	; 21
     434:	d4 2a       	or	r13, r20
     436:	35 2d       	mov	r19, r5
     438:	79 0e       	add	r7, r25
     43a:	85 59       	subi	r24, 0x95	; 149
     43c:	4d 94 44 49 	jmp	0x129288	; 0x129288 <__TEXT_REGION_LENGTH__+0x109288>
     440:	29 c9       	rjmp	.-3502   	; 0xfffff694 <__eeprom_end+0xff7ef694>
     442:	b4 30       	cpi	r27, 0x04	; 4
     444:	d2 00       	.word	0x00d2	; ????
     446:	7a 0a       	sbc	r7, r26
     448:	64 62       	ori	r22, 0x24	; 36
     44a:	c5 90       	lpm	r12, Z+
     44c:	45 6d       	ori	r20, 0xD5	; 213
     44e:	43 00       	.word	0x0043	; ????
     450:	7b 0a       	sbc	r7, r27
     452:	a3 da       	rcall	.-2746   	; 0xfffff99a <__eeprom_end+0xff7ef99a>
     454:	54 12       	cpse	r5, r20
     456:	55 b2       	in	r5, 0x15	; 21
     458:	a8 2d       	mov	r26, r8
     45a:	7c 07       	cpc	r23, r28
     45c:	a1 db       	rcall	.-2238   	; 0xfffffba0 <__eeprom_end+0xff7efba0>
     45e:	c4 43       	sbci	r28, 0x34	; 52
     460:	00 7d       	andi	r16, 0xD0	; 208
     462:	0b a3       	std	Y+35, r16	; 0x23
     464:	da 44       	sbci	r29, 0x4A	; 74
     466:	16 d5       	rcall	.+2604   	; 0xe94 <u8g2_font_decode_glyph+0xce>
     468:	92 a8       	ldd	r9, Z+50	; 0x32
     46a:	25 02       	muls	r18, r21
     46c:	7e 07       	cpc	r23, r30
     46e:	26 ee       	ldi	r18, 0xE6	; 230
     470:	8d 64       	ori	r24, 0x4D	; 77
     472:	01 a0       	ldd	r0, Z+33	; 0x21
     474:	05 00       	.word	0x0005	; ????
     476:	e6 04       	cpc	r14, r6
     478:	a1 07       	cpc	r26, r17
     47a:	81 db       	rcall	.-2302   	; 0xfffffb7e <__eeprom_end+0xff7efb7e>
     47c:	44 32       	cpi	r20, 0x24	; 36
     47e:	0c a2       	std	Y+36, r0	; 0x24
     480:	0e 85       	ldd	r16, Y+14	; 0x0e
     482:	9f 5d       	subi	r25, 0xDF	; 223
     484:	b4 54       	subi	r27, 0x44	; 68
     486:	94 28       	or	r9, r4
     488:	89 92       	st	Y+, r8
     48a:	ca 94       	dec	r12
     48c:	01 a3       	std	Z+33, r16	; 0x21
     48e:	0c 85       	ldd	r16, Y+12	; 0x0c
     490:	a2 95       	swap	r26
     492:	54 c9       	rjmp	.-3416   	; 0xfffff73c <__eeprom_end+0xff7ef73c>
     494:	b6 b0       	in	r11, 0x06	; 6
     496:	a4 28       	or	r10, r4
     498:	00 a4       	ldd	r0, Z+40	; 0x28
     49a:	0c 64       	ori	r16, 0x4C	; 76
     49c:	66 45       	sbci	r22, 0x56	; 86
     49e:	94 28       	or	r9, r4
     4a0:	91 94       	neg	r9
     4a2:	28 51       	subi	r18, 0x18	; 24
     4a4:	00 a5       	ldd	r16, Z+40	; 0x28
     4a6:	0d 85       	ldd	r16, Y+13	; 0x0d
     4a8:	a2 45       	sbci	r26, 0x52	; 82
     4aa:	66 4b       	sbci	r22, 0xB6	; 182
     4ac:	2a 83       	std	Y+2, r18	; 0x02
     4ae:	14 0d       	add	r17, r4
     4b0:	52 04       	cpc	r5, r2
     4b2:	a6 08       	sbc	r10, r6
     4b4:	a1 db       	rcall	.-2238   	; 0xfffffbf8 <__eeprom_end+0xff7efbf8>
     4b6:	c4 10       	cpse	r12, r4
     4b8:	0d 01       	movw	r0, r26
     4ba:	a7 0f       	add	r26, r23
     4bc:	a5 9a       	sbi	0x14, 5	; 20
     4be:	cd 92       	st	X+, r12
     4c0:	8d 4b       	sbci	r24, 0xBD	; 189
     4c2:	34 44       	sbci	r19, 0x44	; 68
     4c4:	c9 b8       	out	0x09, r12	; 9
     4c6:	25 0b       	sbc	r18, r21
     4c8:	00 a8       	ldd	r0, Z+48	; 0x30
     4ca:	06 13       	cpse	r16, r22
     4cc:	fe 44       	sbci	r31, 0x4E	; 78
     4ce:	12 a9       	ldd	r17, Z+50	; 0x32
     4d0:	0e 77       	andi	r16, 0x7E	; 126
     4d2:	63 d6       	rcall	.+3270   	; 0x119a <u8g2_UpdateRefHeight+0xe>
     4d4:	56 89       	ldd	r21, Z+22	; 0x16
     4d6:	14 25       	eor	r17, r4
     4d8:	93 94       	inc	r9
     4da:	5a 36       	cpi	r21, 0x6A	; 106
     4dc:	01 aa       	std	Z+49, r0	; 0x31
     4de:	08 53       	subi	r16, 0x38	; 56
     4e0:	2e c5       	rjmp	.+2652   	; 0xf3e <u8g2_font_get_glyph_data+0x4>
     4e2:	a4 64       	ori	r26, 0x44	; 68
     4e4:	03 ab       	std	Z+51, r16	; 0x33
     4e6:	0a 55       	subi	r16, 0x5A	; 90
     4e8:	a2 55       	subi	r26, 0x52	; 82
     4ea:	d2 5b       	subi	r29, 0xB2	; 178
     4ec:	92 25       	eor	r25, r2
     4ee:	01 ac       	ldd	r0, Z+57	; 0x39
     4f0:	07 35       	cpi	r16, 0x57	; 87
     4f2:	eb c5       	rjmp	.+3030   	; 0x10ca <u8g2_DrawGlyph+0x6a>
     4f4:	20 16       	cp	r2, r16
     4f6:	ad 06       	cpc	r10, r29
     4f8:	13 2e       	mov	r1, r19
     4fa:	c5 00       	.word	0x00c5	; ????
     4fc:	ae 0d       	add	r26, r14
     4fe:	77 63       	ori	r23, 0x37	; 55
     500:	d6 56       	subi	r29, 0x66	; 102
     502:	49 16       	cp	r4, r25
     504:	93 d2       	rcall	.+1318   	; 0xa2c <u8g2_SendBuffer>
     506:	2d 9b       	sbis	0x05, 5	; 5
     508:	00 af       	std	Z+56, r16	; 0x38
     50a:	06 13       	cpse	r16, r22
     50c:	fe c4       	rjmp	.+2556   	; 0xf0a <u8g2_font_decode_glyph+0x144>
     50e:	00 b0       	in	r0, 0x00	; 0
     510:	09 44       	sbci	r16, 0x49	; 73
     512:	32 8d       	ldd	r19, Z+26	; 0x1a
     514:	12 49       	sbci	r17, 0x92	; 146
     516:	89 02       	muls	r24, r25
     518:	b1 0c       	add	r11, r1
     51a:	75 a2       	std	Z+37, r7	; 0x25
     51c:	55 18       	sub	r5, r5
     51e:	0d 52       	subi	r16, 0x2D	; 45
     520:	98 03       	fmulsu	r17, r16
     522:	83 00       	.word	0x0083	; ????
     524:	b2 07       	cpc	r27, r18
     526:	43 f2       	brvs	.-112    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     528:	cc 52       	subi	r28, 0x2C	; 44
     52a:	19 b3       	in	r17, 0x19	; 25
     52c:	08 43       	sbci	r16, 0x38	; 56
     52e:	f2 c4       	rjmp	.+2532   	; 0xf14 <u8g2_font_decode_glyph+0x14e>
     530:	92 2d       	mov	r25, r2
     532:	00 b4       	in	r0, 0x20	; 32
     534:	06 22       	and	r0, r22
     536:	fe 8c       	ldd	r15, Y+30	; 0x1e
     538:	02 b5       	in	r16, 0x22	; 34
     53a:	0a 84       	ldd	r0, Y+10	; 0x0a
     53c:	5a 45       	sbci	r21, 0x5A	; 90
     53e:	e4 69       	ori	r30, 0x94	; 148
     540:	d8 32       	cpi	r29, 0x28	; 40
     542:	00 b6       	in	r0, 0x30	; 48
     544:	15 a6       	std	Z+45, r1	; 0x2d
     546:	9a cd       	rjmp	.-1228   	; 0x7c <__trampolines_end+0x14>
     548:	30 28       	or	r3, r0
     54a:	c9 92       	st	Y+, r12
     54c:	2c 91       	ld	r18, X
     54e:	92 25       	eor	r25, r2
     550:	59 92       	st	Y+, r5
     552:	25 59       	subi	r18, 0x95	; 149
     554:	92 25       	eor	r25, r2
     556:	09 00       	.word	0x0009	; ????
     558:	b7 06       	cpc	r11, r23
     55a:	12 ee       	ldi	r17, 0xE2	; 226
     55c:	84 00       	.word	0x0084	; ????
     55e:	b8 06       	cpc	r11, r24
     560:	22 da       	rcall	.-3004   	; 0xfffff9a6 <__eeprom_end+0xff7ef9a6>
     562:	cc 00       	.word	0x00cc	; ????
     564:	b9 06       	cpc	r11, r25
     566:	42 f2       	brmi	.-112    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     568:	cc 52       	subi	r28, 0x2C	; 44
     56a:	ba 09       	sbc	r27, r10
     56c:	53 2e       	mov	r5, r19
     56e:	c5 90       	lpm	r12, Z+
     570:	0c d9       	rcall	.-3560   	; 0xfffff78a <__eeprom_end+0xff7ef78a>
     572:	00 bb       	out	0x10, r16	; 16
     574:	0b 55       	subi	r16, 0x5B	; 91
     576:	a2 45       	sbci	r26, 0x52	; 82
     578:	92 25       	eor	r25, r2
     57a:	59 d2       	rcall	.+1202   	; 0xa2e <u8g2_SendBuffer+0x2>
     57c:	13 00       	.word	0x0013	; ????
     57e:	bc 13       	cpse	r27, r28
     580:	89 62       	ori	r24, 0x29	; 41
     582:	4e 96       	adiw	r24, 0x1e	; 30
     584:	69 61       	ori	r22, 0x19	; 25
     586:	94 46       	sbci	r25, 0x64	; 100
     588:	39 90       	ld	r3, Y+
     58a:	85 91       	lpm	r24, Z+
     58c:	16 0d       	add	r17, r6
     58e:	51 98       	cbi	0x0a, 1	; 10
     590:	00 bd       	out	0x20, r16	; 32
     592:	10 88       	ldd	r1, Z+16	; 0x10
     594:	62 4e       	sbci	r22, 0xE2	; 226
     596:	16 69       	ori	r17, 0x96	; 150
     598:	a5 30       	cpi	r26, 0x05	; 5
     59a:	8a 23       	and	r24, r26
     59c:	2d 29       	or	r18, r13
     59e:	65 a5       	ldd	r22, Z+45	; 0x2d
     5a0:	01 be       	out	0x31, r0	; 49
     5a2:	13 89       	ldd	r17, Z+19	; 0x13
     5a4:	62 c6       	rjmp	.+3268   	; 0x126a <u8g2_DrawHVLine+0x8>
     5a6:	0e 64       	ori	r16, 0x4E	; 78
     5a8:	69 94       	.word	0x9469	; ????
     5aa:	49 39       	cpi	r20, 0x99	; 153
     5ac:	12 85       	ldd	r17, Z+10	; 0x0a
     5ae:	91 98       	cbi	0x12, 1	; 18
     5b0:	0c 51       	subi	r16, 0x1C	; 28
     5b2:	98 00       	.word	0x0098	; ????
     5b4:	bf 0c       	add	r11, r15
     5b6:	84 9b       	sbis	0x10, 4	; 16
     5b8:	55 0e       	add	r5, r21
     5ba:	64 51       	subi	r22, 0x14	; 20
     5bc:	2d 4a       	sbci	r18, 0xAD	; 173
     5be:	14 00       	.word	0x0014	; ????
     5c0:	c0 10       	cpse	r12, r0
     5c2:	b7 e2       	ldi	r27, 0x27	; 39
     5c4:	55 0e       	add	r5, r21
     5c6:	e4 70       	andi	r30, 0x04	; 4
     5c8:	35 09       	sbc	r19, r5
     5ca:	93 ac       	ldd	r9, Z+59	; 0x3b
     5cc:	34 28       	or	r3, r4
     5ce:	a9 1a       	sub	r10, r25
     5d0:	c1 10       	cpse	r12, r1
     5d2:	b7 e2       	ldi	r27, 0x27	; 39
     5d4:	65 9a       	sbi	0x0c, 5	; 12
     5d6:	c3 d5       	rcall	.+2950   	; 0x115e <u8g2_draw_string+0x7a>
     5d8:	24 4c       	sbci	r18, 0xC4	; 196
     5da:	b2 d2       	rcall	.+1380   	; 0xb40 <u8g2_read_font_info+0x48>
     5dc:	a0 a4       	ldd	r10, Z+40	; 0x28
     5de:	6a 00       	.word	0x006a	; ????
     5e0:	c2 11       	cpse	r28, r2
     5e2:	b7 e2       	ldi	r27, 0x27	; 39
     5e4:	5d 9a       	sbi	0x0b, 5	; 11
     5e6:	e4 68       	ori	r30, 0x84	; 132
     5e8:	9c 26       	eor	r9, r28
     5ea:	61 92       	st	Z+, r6
     5ec:	95 06       	cpc	r9, r21
     5ee:	25 55       	subi	r18, 0x55	; 85
     5f0:	03 c3       	rjmp	.+1542   	; 0xbf8 <u8g2_font_decode_get_unsigned_bits+0x42>
     5f2:	12 b7       	in	r17, 0x32	; 50
     5f4:	e2 5d       	subi	r30, 0xD2	; 210
     5f6:	92 25       	eor	r25, r2
     5f8:	39 1a       	sub	r3, r25
     5fa:	a7 49       	sbci	r26, 0x97	; 151
     5fc:	98 64       	ori	r25, 0x48	; 72
     5fe:	a5 41       	sbci	r26, 0x15	; 21
     600:	49 d5       	rcall	.+2706   	; 0x1094 <u8g2_DrawGlyph+0x34>
     602:	00 c4       	rjmp	.+2048   	; 0xe04 <u8g2_font_decode_glyph+0x3e>
     604:	10 a7       	std	Z+40, r17	; 0x28
     606:	e2 55       	subi	r30, 0x52	; 82
     608:	92 a3       	std	Z+34, r25	; 0x22
     60a:	71 9a       	sbi	0x0e, 1	; 14
     60c:	84 49       	sbci	r24, 0x94	; 148
     60e:	56 1a       	sub	r5, r22
     610:	94 54       	subi	r25, 0x44	; 68
     612:	0d c5       	rjmp	.+2586   	; 0x102e <u8g2_font_get_glyph_data+0xf4>
     614:	10 b7       	in	r17, 0x30	; 48
     616:	e2 5d       	subi	r30, 0xD2	; 210
     618:	9a a4       	ldd	r9, Y+42	; 0x2a
     61a:	71 35       	cpi	r23, 0x51	; 81
     61c:	09 93       	st	Y+, r16
     61e:	ac 34       	cpi	r26, 0x4C	; 76
     620:	28 a9       	ldd	r18, Y+48	; 0x30
     622:	1a c6       	rjmp	.+3124   	; 0x1258 <u8g2_draw_hv_line_2dir+0x10>
     624:	12 89       	ldd	r17, Z+18	; 0x12
     626:	a2 de       	rcall	.-700    	; 0x36c <__trampolines_end+0x304>
     628:	b0 c9       	rjmp	.-3232   	; 0xfffff98a <__eeprom_end+0xff7ef98a>
     62a:	49 9c       	mul	r4, r9
     62c:	0c 4a       	sbci	r16, 0xAC	; 172
     62e:	94 0e       	add	r9, r20
     630:	61 16       	cp	r6, r17
     632:	66 83       	std	Z+6, r22	; 0x06
     634:	00 c7       	rjmp	.+3584   	; 0x1436 <u8g2_ll_hvline_vertical_top_lsb+0x98>
     636:	0d a6       	std	Y+45, r0	; 0x2d
     638:	1b ce       	rjmp	.-970    	; 0x270 <__trampolines_end+0x208>
     63a:	90 84       	ldd	r9, Z+8	; 0x08
     63c:	6a c7       	rjmp	.+3796   	; 0x1512 <u8g2_apply_clip_window+0x32>
     63e:	64 08       	sbc	r6, r4
     640:	43 09       	sbc	r20, r3
     642:	c8 0d       	add	r28, r8
     644:	b5 e3       	ldi	r27, 0x35	; 53
     646:	4d 9a       	sbi	0x09, 5	; 9
     648:	03 c7       	rjmp	.+3590   	; 0x1450 <u8g2_ll_hvline_vertical_top_lsb+0xb2>
     64a:	70 18       	sub	r7, r0
     64c:	8b 83       	std	Y+3, r24	; 0x03
     64e:	00 c9       	rjmp	.-3584   	; 0xfffff850 <__eeprom_end+0xff7ef850>
     650:	0c b5       	in	r16, 0x2c	; 44
     652:	e3 5d       	subi	r30, 0xD3	; 211
     654:	1d 38       	cpi	r17, 0x8D	; 141
     656:	86 c3       	rjmp	.+1804   	; 0xd64 <u8g2_font_decode_len+0xd2>
     658:	58 1c       	adc	r5, r8
     65a:	04 ca       	rjmp	.-3064   	; 0xfffffa64 <__eeprom_end+0xff7efa64>
     65c:	0d b5       	in	r16, 0x2d	; 45
     65e:	e3 55       	subi	r30, 0x53	; 83
     660:	96 c4       	rjmp	.+2348   	; 0xf8e <u8g2_font_get_glyph_data+0x54>
     662:	c3 18       	sub	r12, r3
     664:	0e 63       	ori	r16, 0x3E	; 62
     666:	71 10       	cpse	r7, r1
     668:	cb 0c       	add	r12, r11
     66a:	a5 e3       	ldi	r26, 0x35	; 53
     66c:	4d 79       	andi	r20, 0x9D	; 157
     66e:	18 c3       	rjmp	.+1584   	; 0xca0 <u8g2_font_decode_len+0xe>
     670:	61 2c       	mov	r6, r1
     672:	0e 02       	muls	r16, r30
     674:	cc 09       	sbc	r28, r12
     676:	b2 e2       	ldi	r27, 0x22	; 34
     678:	44 94       	.word	0x9444	; ????
     67a:	25 fd       	sbrc	r18, 5
     67c:	00 cd       	rjmp	.-1536   	; 0x7e <__trampolines_end+0x16>
     67e:	09 b2       	in	r0, 0x19	; 25
     680:	e3 8c       	ldd	r14, Z+27	; 0x1b
     682:	96 f4       	brtc	.+36     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
     684:	0b 00       	.word	0x000b	; ????
     686:	ce 09       	sbc	r28, r14
     688:	b3 e2       	ldi	r27, 0x23	; 35
     68a:	4c 63       	ori	r20, 0x3C	; 60
     68c:	d4 2f       	mov	r29, r20
     68e:	00 cf       	rjmp	.-512    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     690:	09 a3       	std	Y+33, r16	; 0x21
     692:	e2 44       	sbci	r30, 0x42	; 66
     694:	12 46       	sbci	r17, 0x62	; 98
     696:	fd 02       	muls	r31, r29
     698:	d0 11       	cpse	r29, r0
     69a:	87 22       	and	r8, r23
     69c:	ce 90       	ld	r12, -X
     69e:	95 c2       	rjmp	.+1322   	; 0xbca <u8g2_font_decode_get_unsigned_bits+0x14>
     6a0:	41 4a       	sbci	r20, 0xA1	; 161
     6a2:	c2 24       	eor	r12, r2
     6a4:	4c b2       	in	r4, 0x1c	; 28
     6a6:	68 88       	ldd	r6, Y+16	; 0x10
     6a8:	00 d1       	rcall	.+512    	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
     6aa:	12 b6       	in	r1, 0x32	; 50
     6ac:	23 56       	subi	r18, 0x63	; 99
     6ae:	12 25       	eor	r17, r2
     6b0:	39 a2       	std	Y+33, r3	; 0x21
     6b2:	6d 4a       	sbci	r22, 0xAD	; 173
     6b4:	a4 44       	sbci	r26, 0x44	; 68
     6b6:	52 22       	and	r5, r18
     6b8:	25 da       	rcall	.-2998   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
     6ba:	26 d2       	rcall	.+1100   	; 0xb08 <u8g2_read_font_info+0x10>
     6bc:	0e b6       	in	r0, 0x3e	; 62
     6be:	23 56       	subi	r18, 0x63	; 99
     6c0:	9c 43       	sbci	r25, 0x3C	; 60
     6c2:	43 12       	cpse	r4, r19
     6c4:	fa 98       	cbi	0x1f, 2	; 31
     6c6:	0c 09       	sbc	r16, r12
     6c8:	00 d3       	rcall	.+1536   	; 0xcca <u8g2_font_decode_len+0x38>
     6ca:	0d b6       	in	r0, 0x3d	; 61
     6cc:	23 66       	ori	r18, 0x63	; 99
     6ce:	1d 1a       	sub	r1, r29
     6d0:	92 d0       	rcall	.+292    	; 0x7f6 <__LOCK_REGION_LENGTH__+0x3f6>
     6d2:	c7 64       	ori	r28, 0x47	; 71
     6d4:	48 00       	.word	0x0048	; ????
     6d6:	d4 0e       	add	r13, r20
     6d8:	b6 23       	and	r27, r22
     6da:	56 98       	cbi	0x0a, 6	; 10
     6dc:	e4 d0       	rcall	.+456    	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
     6de:	90 84       	ldd	r9, Z+8	; 0x08
     6e0:	3e 26       	eor	r3, r30
     6e2:	43 02       	muls	r20, r19
     6e4:	d5 0f       	add	r29, r21
     6e6:	b6 23       	and	r27, r22
     6e8:	56 12       	cpse	r5, r22
     6ea:	25 39       	cpi	r18, 0x95	; 149
     6ec:	34 24       	eor	r3, r4
     6ee:	a1 8f       	std	Z+25, r26	; 0x19
     6f0:	c9 90       	ld	r12, Y+
     6f2:	00 d6       	rcall	.+3072   	; 0x12f4 <u8g2_DrawHVLine+0x92>
     6f4:	0e a6       	std	Y+46, r0	; 0x2e
     6f6:	23 4e       	sbci	r18, 0xE3	; 227
     6f8:	94 23       	and	r25, r20
     6fa:	43 12       	cpse	r4, r19
     6fc:	fa 98       	cbi	0x1f, 2	; 31
     6fe:	0c 09       	sbc	r16, r12
     700:	00 d7       	rcall	.+3584   	; 0x1502 <u8g2_apply_clip_window+0x22>
     702:	0a 55       	subi	r16, 0x5A	; 90
     704:	a6 45       	sbci	r26, 0x56	; 86
     706:	96 d4       	rcall	.+2348   	; 0x1034 <u8g2_font_get_glyph_data+0xfa>
     708:	2a b5       	in	r18, 0x2a	; 42
     70a:	00 d8       	rcall	.-4096   	; 0xfffff70c <__eeprom_end+0xff7ef70c>
     70c:	12 a6       	std	Z+42, r1	; 0x2a
     70e:	1f 6e       	ori	r17, 0xEF	; 239
     710:	32 24       	eor	r3, r2
     712:	d9 94       	.word	0x94d9	; ????
     714:	48 89       	ldd	r20, Y+16	; 0x10
     716:	12 29       	or	r17, r2
     718:	d1 96       	adiw	r26, 0x31	; 49
     71a:	0c 49       	sbci	r16, 0x9C	; 156
     71c:	0a d9       	rcall	.-3564   	; 0xfffff932 <__eeprom_end+0xff7ef932>
     71e:	0c b6       	in	r0, 0x3c	; 60
     720:	23 56       	subi	r18, 0x63	; 99
     722:	9c 23       	and	r25, r28
     724:	a1 1f       	adc	r26, r17
     726:	93 21       	and	r25, r3
     728:	01 da       	rcall	.-3070   	; 0xfffffb2c <__eeprom_end+0xff7efb2c>
     72a:	0c b6       	in	r0, 0x3c	; 60
     72c:	23 66       	ori	r18, 0x63	; 99
     72e:	1d 09       	sbc	r17, r13
     730:	fd 98       	cbi	0x1f, 5	; 31
     732:	0c 09       	sbc	r16, r12
     734:	00 db       	rcall	.-2560   	; 0xfffffd36 <__eeprom_end+0xff7efd36>
     736:	0d b6       	in	r0, 0x3d	; 61
     738:	23 56       	subi	r18, 0x63	; 99
     73a:	98 e4       	ldi	r25, 0x48	; 72
     73c:	48 e8       	ldi	r20, 0x88	; 136
     73e:	c7 64       	ori	r28, 0x47	; 71
     740:	48 00       	.word	0x0048	; ????
     742:	dc 0c       	add	r13, r12
     744:	a6 23       	and	r26, r22
     746:	4e 94 03 a1 	call	0x114206	; 0x114206 <__TEXT_REGION_LENGTH__+0xf4206>
     74a:	1f 93       	push	r17
     74c:	21 01       	movw	r4, r2
     74e:	dd 10       	cpse	r13, r13
     750:	b7 e2       	ldi	r27, 0x27	; 39
     752:	65 9a       	sbi	0x0c, 5	; 12
     754:	63 69       	ori	r22, 0x93	; 147
     756:	92 45       	sbci	r25, 0x52	; 82
     758:	59 25       	eor	r21, r9
     75a:	4c d2       	rcall	.+1176   	; 0xbf4 <u8g2_font_decode_get_unsigned_bits+0x3e>
     75c:	b8 06       	cpc	r11, r24
     75e:	de 0d       	add	r29, r14
     760:	85 e3       	ldi	r24, 0x35	; 53
     762:	45 18       	sub	r4, r5
     764:	0e 49       	sbci	r16, 0x9E	; 158
     766:	a6 0d       	add	r26, r6
     768:	4a 18       	sub	r4, r10
     76a:	02 df       	rcall	.-508    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     76c:	0b 84       	ldd	r0, Y+11	; 0x0b
     76e:	62 8d       	ldd	r22, Z+26	; 0x1a
     770:	12 59       	subi	r17, 0x92	; 146
     772:	4a 2e       	mov	r4, r26
     774:	09 00       	.word	0x0009	; ????
     776:	e0 0e       	add	r14, r16
     778:	95 62       	ori	r25, 0x25	; 37
     77a:	4d 9a       	sbi	0x09, 5	; 9
     77c:	03 6b       	ori	r16, 0xB3	; 179
     77e:	b4 44       	sbci	r27, 0x44	; 68
     780:	49 14       	cp	r4, r9
     782:	29 01       	movw	r4, r18
     784:	e1 0e       	add	r14, r17
     786:	95 62       	ori	r25, 0x25	; 37
     788:	55 96       	adiw	r26, 0x15	; 21
     78a:	23 6b       	ori	r18, 0xB3	; 179
     78c:	b4 44       	sbci	r27, 0x44	; 68
     78e:	49 14       	cp	r4, r9
     790:	29 01       	movw	r4, r18
     792:	e2 0e       	add	r14, r18
     794:	95 62       	ori	r25, 0x25	; 37
     796:	55 96       	adiw	r26, 0x15	; 21
     798:	c4 6b       	ori	r28, 0xB4	; 180
     79a:	b4 44       	sbci	r27, 0x44	; 68
     79c:	49 14       	cp	r4, r9
     79e:	29 01       	movw	r4, r18
     7a0:	e3 0d       	add	r30, r3
     7a2:	95 62       	ori	r25, 0x25	; 37
     7a4:	4d 77       	andi	r20, 0x7D	; 125
     7a6:	60 8d       	ldd	r22, Z+24	; 0x18
     7a8:	96 28       	or	r9, r6
     7aa:	89 22       	and	r8, r25
     7ac:	25 e4       	ldi	r18, 0x45	; 69
     7ae:	0c 85       	ldd	r16, Y+12	; 0x0c
     7b0:	62 4d       	sbci	r22, 0xD2	; 210
     7b2:	79 8d       	ldd	r23, Y+25	; 0x19
     7b4:	96 28       	or	r9, r6
     7b6:	89 22       	and	r8, r25
     7b8:	25 e5       	ldi	r18, 0x55	; 85
     7ba:	0f 95 62 55 	call	0x42aac4	; 0x42aac4 <__TEXT_REGION_LENGTH__+0x40aac4>
     7be:	96 64       	ori	r25, 0x46	; 70
     7c0:	d1 1a       	sub	r13, r17
     7c2:	2d 51       	subi	r18, 0x1D	; 29
     7c4:	12 45       	sbci	r17, 0x52	; 82
     7c6:	4a 00       	.word	0x004a	; ????
     7c8:	e6 0e       	add	r14, r22
     7ca:	67 22       	and	r6, r23
     7cc:	c6 22       	and	r12, r22
     7ce:	46 c9       	rjmp	.-3444   	; 0xfffffa5c <__eeprom_end+0xff7efa5c>
     7d0:	30 44       	sbci	r19, 0x40	; 64
     7d2:	59 54       	subi	r21, 0x49	; 73
     7d4:	b1 00       	.word	0x00b1	; ????
     7d6:	e7 0c       	add	r14, r7
     7d8:	84 5a       	subi	r24, 0xA4	; 164
     7da:	8d 12       	cpse	r8, r29
     7dc:	69 a5       	ldd	r22, Y+41	; 0x29
     7de:	44 8b       	std	Z+20, r20	; 0x14
     7e0:	14 00       	.word	0x0014	; ????
     7e2:	e8 0c       	add	r14, r8
     7e4:	94 62       	ori	r25, 0x24	; 36
     7e6:	4d 18       	sub	r4, r13
     7e8:	2b d1       	rcall	.+598    	; 0xa40 <u8g2_SendBuffer+0x14>
     7ea:	b0 45       	sbci	r27, 0x50	; 80
     7ec:	89 02       	muls	r24, r25
     7ee:	e9 0c       	add	r14, r9
     7f0:	94 62       	ori	r25, 0x24	; 36
     7f2:	55 1d       	adc	r21, r5
     7f4:	50 a2       	std	Z+32, r5	; 0x20
     7f6:	61 8b       	std	Z+17, r22	; 0x11
     7f8:	12 05       	cpc	r17, r2
     7fa:	ea 0d       	add	r30, r10
     7fc:	94 62       	ori	r25, 0x24	; 36
     7fe:	4d 94 c4 4a 	jmp	0x129588	; 0x129588 <__TEXT_REGION_LENGTH__+0x109588>
     802:	34 6c       	ori	r19, 0xC4	; 196
     804:	51 a2       	std	Z+33, r5	; 0x21
     806:	00 eb       	ldi	r16, 0xB0	; 176
     808:	0c 84       	ldd	r0, Y+12	; 0x0c
     80a:	62 45       	sbci	r22, 0x52	; 82
     80c:	12 2b       	or	r17, r18
     80e:	d1 b0       	in	r13, 0x01	; 1
     810:	45 89       	ldd	r20, Z+21	; 0x15
     812:	02 ec       	ldi	r16, 0xC2	; 194
     814:	08 92       	.word	0x9208	; ????
     816:	a1 44       	sbci	r26, 0x41	; 65
     818:	94 25       	eor	r25, r4
     81a:	3d ed       	ldi	r19, 0xDD	; 221
     81c:	08 92       	.word	0x9208	; ????
     81e:	a2 8c       	ldd	r10, Z+26	; 0x1a
     820:	96 f4       	brtc	.+36     	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
     822:	02 ee       	ldi	r16, 0xE2	; 226
     824:	09 93       	st	Y+, r16
     826:	a1 4c       	sbci	r26, 0xC1	; 193
     828:	63 d4       	rcall	.+2246   	; 0x10f0 <u8g2_draw_string+0xc>
     82a:	0b 00       	.word	0x000b	; ????
     82c:	ef 09       	sbc	r30, r15
     82e:	83 a1       	ldd	r24, Z+35	; 0x23
     830:	44 12       	cpse	r4, r20
     832:	46 bd       	out	0x26, r20	; 38
     834:	00 f0       	brcs	.+0      	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
     836:	0d 95 a2 4d 	jmp	0x429b44	; 0x429b44 <__TEXT_REGION_LENGTH__+0x409b44>
     83a:	38 48       	sbci	r19, 0x88	; 136
     83c:	d1 a0       	ldd	r13, Z+33	; 0x21
     83e:	b9 25       	eor	r27, r9
     840:	0b 00       	.word	0x000b	; ????
     842:	f1 0a       	sbc	r15, r17
     844:	94 62       	ori	r25, 0x24	; 36
     846:	4d a2       	std	Y+37, r4	; 0x25
     848:	a4 4b       	sbci	r26, 0xB4	; 180
     84a:	e4 29       	or	r30, r4
     84c:	f2 0c       	add	r15, r2
     84e:	95 a2       	std	Z+37, r9	; 0x25
     850:	4d 9a       	sbi	0x09, 5	; 9
     852:	23 4b       	sbci	r18, 0xB3	; 179
     854:	e6 96       	adiw	r28, 0x36	; 54
     856:	2c 00       	.word	0x002c	; ????
     858:	f3 0b       	sbc	r31, r19
     85a:	95 a2       	std	Z+37, r9	; 0x25
     85c:	5d 1d       	adc	r21, r13
     85e:	59 32       	cpi	r21, 0x29	; 41
     860:	b7 64       	ori	r27, 0x47	; 71
     862:	01 f4       	brne	.+0      	; 0x864 <__LOCK_REGION_LENGTH__+0x464>
     864:	0d 95 a2 55 	jmp	0x42ab44	; 0x42ab44 <__TEXT_REGION_LENGTH__+0x40ab44>
     868:	96 e4       	ldi	r25, 0x46	; 70
     86a:	c0 92 b9 25 	sts	0x25B9, r12	; 0x8025b9 <__bss_end+0x1fdf>
     86e:	0b 00       	.word	0x000b	; ????
     870:	f5 0c       	add	r15, r5
     872:	95 a2       	std	Z+37, r9	; 0x25
     874:	55 d2       	rcall	.+1194   	; 0xd20 <u8g2_font_decode_len+0x8e>
     876:	0e 2c       	mov	r0, r14
     878:	99 5b       	subi	r25, 0xB9	; 185
     87a:	b2 00       	.word	0x00b2	; ????
     87c:	f6 0b       	sbc	r31, r22
     87e:	85 a2       	std	Z+37, r8	; 0x25
     880:	4d 1d       	adc	r20, r13
     882:	58 32       	cpi	r21, 0x28	; 40
     884:	b7 64       	ori	r27, 0x47	; 71
     886:	01 f7       	brne	.-64     	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     888:	0a 55       	subi	r16, 0x5A	; 90
     88a:	a6 55       	subi	r26, 0x56	; 86
     88c:	0e 0c       	add	r0, r14
     88e:	3a 10       	cpse	r3, r10
     890:	01 f8       	bld	r0, 1
     892:	0d 67       	ori	r16, 0x7D	; 125
     894:	a1 d5       	rcall	.+2882   	; 0x13d8 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
     896:	52 92       	st	-Z, r5
     898:	92 92       	st	-Z, r9
     89a:	54 4b       	sbci	r21, 0xB4	; 180
     89c:	92 09       	sbc	r25, r2
     89e:	f9 0a       	sbc	r15, r25
     8a0:	94 62       	ori	r25, 0x24	; 36
     8a2:	4d 98       	cbi	0x09, 5	; 9
     8a4:	46 9e       	mul	r4, r22
     8a6:	92 01       	movw	r18, r4
     8a8:	fa 0a       	sbc	r15, r26
     8aa:	94 62       	ori	r25, 0x24	; 36
     8ac:	5d 94 46 9e 	jmp	0x173c8c	; 0x173c8c <__TEXT_REGION_LENGTH__+0x153c8c>
     8b0:	92 01       	movw	r18, r4
     8b2:	fb 0a       	sbc	r15, r27
     8b4:	94 62       	ori	r25, 0x24	; 36
     8b6:	4d 94 a4 91 	jmp	0x132348	; 0x132348 <__TEXT_REGION_LENGTH__+0x112348>
     8ba:	a7 64       	ori	r26, 0x47	; 71
     8bc:	fc 0a       	sbc	r15, r28
     8be:	84 62       	ori	r24, 0x24	; 36
     8c0:	45 92       	las	Z, r4
     8c2:	46 9e       	mul	r4, r22
     8c4:	92 01       	movw	r18, r4
     8c6:	fd 10       	cpse	r15, r13
     8c8:	b5 59       	subi	r27, 0x95	; 149
     8ca:	65 96       	adiw	r28, 0x15	; 21
     8cc:	03 51       	subi	r16, 0x13	; 19
     8ce:	12 25       	eor	r17, r2
     8d0:	a5 24       	eor	r10, r5
     8d2:	d3 c2       	rjmp	.+1446   	; 0xe7a <u8g2_font_decode_glyph+0xb4>
     8d4:	48 03       	fmul	r20, r16
     8d6:	fe 0d       	add	r31, r14
     8d8:	a5 9a       	sbi	0x14, 5	; 20
     8da:	45 58       	subi	r20, 0x85	; 133
     8dc:	31 69       	ori	r19, 0x91	; 145
     8de:	da a4       	ldd	r13, Y+42	; 0x2a
     8e0:	28 61       	ori	r18, 0x18	; 24
     8e2:	08 ff       	.word	0xff08	; ????
     8e4:	10 a5       	ldd	r17, Z+40	; 0x28
     8e6:	59 4d       	sbci	r21, 0xD9	; 217
     8e8:	1d 88       	ldd	r1, Y+21	; 0x15
     8ea:	92 28       	or	r9, r2
     8ec:	29 25       	eor	r18, r9
     8ee:	99 16       	cp	r9, r25
     8f0:	46 1a       	sub	r4, r22
     8f2:	00 00       	nop
     8f4:	00 00       	nop
     8f6:	04 ff       	sbrs	r16, 4
     8f8:	ff 00       	.word	0x00ff	; ????
	...

000008fc <__ctors_end>:
     8fc:	11 24       	eor	r1, r1
     8fe:	1f be       	out	0x3f, r1	; 63
     900:	cf ef       	ldi	r28, 0xFF	; 255
     902:	d8 e0       	ldi	r29, 0x08	; 8
     904:	de bf       	out	0x3e, r29	; 62
     906:	cd bf       	out	0x3d, r28	; 61

00000908 <__do_copy_data>:
     908:	11 e0       	ldi	r17, 0x01	; 1
     90a:	a0 e0       	ldi	r26, 0x00	; 0
     90c:	b1 e0       	ldi	r27, 0x01	; 1
     90e:	e6 ef       	ldi	r30, 0xF6	; 246
     910:	fd e1       	ldi	r31, 0x1D	; 29
     912:	02 c0       	rjmp	.+4      	; 0x918 <__do_copy_data+0x10>
     914:	05 90       	lpm	r0, Z+
     916:	0d 92       	st	X+, r0
     918:	a4 37       	cpi	r26, 0x74	; 116
     91a:	b1 07       	cpc	r27, r17
     91c:	d9 f7       	brne	.-10     	; 0x914 <__do_copy_data+0xc>

0000091e <__do_clear_bss>:
     91e:	25 e0       	ldi	r18, 0x05	; 5
     920:	a4 e7       	ldi	r26, 0x74	; 116
     922:	b1 e0       	ldi	r27, 0x01	; 1
     924:	01 c0       	rjmp	.+2      	; 0x928 <.do_clear_bss_start>

00000926 <.do_clear_bss_loop>:
     926:	1d 92       	st	X+, r1

00000928 <.do_clear_bss_start>:
     928:	aa 3d       	cpi	r26, 0xDA	; 218
     92a:	b2 07       	cpc	r27, r18
     92c:	e1 f7       	brne	.-8      	; 0x926 <.do_clear_bss_loop>
     92e:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <main>
     932:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <_exit>

00000936 <__bad_interrupt>:
     936:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000093a <Init_Oled>:


/* Function called to initialize OLED display */
void Init_Oled(void)
{
	u8g2_Setup_ssd1306_128x64_noname_f( &u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, u8x8_avr_gpio_and_delay );
     93a:	21 e8       	ldi	r18, 0x81	; 129
     93c:	3e e0       	ldi	r19, 0x0E	; 14
     93e:	48 e2       	ldi	r20, 0x28	; 40
     940:	5b e0       	ldi	r21, 0x0B	; 11
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	84 e7       	ldi	r24, 0x74	; 116
     948:	95 e0       	ldi	r25, 0x05	; 5
     94a:	0e 94 27 05 	call	0xa4e	; 0xa4e <u8g2_Setup_ssd1306_128x64_noname_f>
	u8g2_InitDisplay(&u8g2);
     94e:	84 e7       	ldi	r24, 0x74	; 116
     950:	95 e0       	ldi	r25, 0x05	; 5
     952:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	84 e7       	ldi	r24, 0x74	; 116
     95a:	95 e0       	ldi	r25, 0x05	; 5
     95c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <u8x8_SetPowerSave>
     960:	08 95       	ret

00000962 <Init_Main>:

/* Function call only once on start to initialize
 * all interfaces and pins */
void Init_Main(void)
{
	Init_Oled();
     962:	0e 94 9d 04 	call	0x93a	; 0x93a <Init_Oled>
     966:	08 95       	ret

00000968 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     968:	af 92       	push	r10
     96a:	bf 92       	push	r11
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	7c 01       	movw	r14, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     97e:	dc 01       	movw	r26, r24
     980:	95 96       	adiw	r26, 0x25	; 37
     982:	bc 90       	ld	r11, X
     984:	95 97       	sbiw	r26, 0x25	; 37
  dest_row = u8g2->tile_curr_row;
     986:	96 96       	adiw	r26, 0x26	; 38
     988:	dc 91       	ld	r29, X
     98a:	96 97       	sbiw	r26, 0x26	; 38
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     98c:	ed 91       	ld	r30, X+
     98e:	fc 91       	ld	r31, X
     990:	a1 88       	ldd	r10, Z+17	; 0x11
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
     992:	cd 2f       	mov	r28, r29
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     994:	c1 2c       	mov	r12, r1
     996:	d1 2c       	mov	r13, r1
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     998:	d7 01       	movw	r26, r14
     99a:	ed 91       	ld	r30, X+
     99c:	fc 91       	ld	r31, X
     99e:	11 97       	sbiw	r26, 0x01	; 1
     9a0:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
     9a2:	93 96       	adiw	r26, 0x23	; 35
     9a4:	0d 91       	ld	r16, X+
     9a6:	1c 91       	ld	r17, X
     9a8:	94 97       	sbiw	r26, 0x24	; 36
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     9aa:	42 2f       	mov	r20, r18
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	44 0f       	add	r20, r20
     9b0:	55 1f       	adc	r21, r21
     9b2:	44 0f       	add	r20, r20
     9b4:	55 1f       	adc	r21, r21
     9b6:	44 0f       	add	r20, r20
     9b8:	55 1f       	adc	r21, r21
     9ba:	4c 9d       	mul	r20, r12
     9bc:	c0 01       	movw	r24, r0
     9be:	4d 9d       	mul	r20, r13
     9c0:	90 0d       	add	r25, r0
     9c2:	5c 9d       	mul	r21, r12
     9c4:	90 0d       	add	r25, r0
     9c6:	11 24       	eor	r1, r1
     9c8:	08 0f       	add	r16, r24
     9ca:	19 1f       	adc	r17, r25
     9cc:	4c 2f       	mov	r20, r28
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	c7 01       	movw	r24, r14
     9d2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
     9d6:	cf 5f       	subi	r28, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
     9d8:	8c 2f       	mov	r24, r28
     9da:	8d 1b       	sub	r24, r29
     9dc:	8b 15       	cp	r24, r11
     9de:	28 f4       	brcc	.+10     	; 0x9ea <u8g2_send_buffer+0x82>
     9e0:	bf ef       	ldi	r27, 0xFF	; 255
     9e2:	cb 1a       	sub	r12, r27
     9e4:	db 0a       	sbc	r13, r27
     9e6:	ca 15       	cp	r28, r10
     9e8:	b8 f2       	brcs	.-82     	; 0x998 <u8g2_send_buffer+0x30>
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	df 90       	pop	r13
     9f8:	cf 90       	pop	r12
     9fa:	bf 90       	pop	r11
     9fc:	af 90       	pop	r10
     9fe:	08 95       	ret

00000a00 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
     a00:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     a02:	a0 81       	ld	r26, Z
     a04:	b1 81       	ldd	r27, Z+1	; 0x01
     a06:	50 96       	adiw	r26, 0x10	; 16
     a08:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
     a0a:	45 a1       	ldd	r20, Z+37	; 0x25
     a0c:	94 9f       	mul	r25, r20
     a0e:	a0 01       	movw	r20, r0
     a10:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
     a12:	44 0f       	add	r20, r20
     a14:	55 1f       	adc	r21, r21
     a16:	44 0f       	add	r20, r20
     a18:	55 1f       	adc	r21, r21
     a1a:	44 0f       	add	r20, r20
     a1c:	55 1f       	adc	r21, r21
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	83 a1       	ldd	r24, Z+35	; 0x23
     a24:	94 a1       	ldd	r25, Z+36	; 0x24
     a26:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <memset>
     a2a:	08 95       	ret

00000a2c <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
     a32:	0e 94 b4 04 	call	0x968	; 0x968 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     a36:	ce 01       	movw	r24, r28
     a38:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <u8x8_RefreshDisplay>
}
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
     a42:	28 e0       	ldi	r18, 0x08	; 8
     a44:	fc 01       	movw	r30, r24
     a46:	20 83       	st	Z, r18
  return buf;
  #endif
}
     a48:	84 e7       	ldi	r24, 0x74	; 116
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	08 95       	ret

00000a4e <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	1f 92       	push	r1
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	7c 01       	movw	r14, r24
     a66:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
     a68:	89 01       	movw	r16, r18
     a6a:	9a 01       	movw	r18, r20
     a6c:	4b e5       	ldi	r20, 0x5B	; 91
     a6e:	5c e0       	ldi	r21, 0x0C	; 12
     a70:	63 eb       	ldi	r22, 0xB3	; 179
     a72:	7d e0       	ldi	r23, 0x0D	; 13
     a74:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	0e 94 21 05 	call	0xa42	; 0xa42 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
     a80:	86 01       	movw	r16, r12
     a82:	2f ec       	ldi	r18, 0xCF	; 207
     a84:	39 e0       	ldi	r19, 0x09	; 9
     a86:	49 81       	ldd	r20, Y+1	; 0x01
     a88:	bc 01       	movw	r22, r24
     a8a:	c7 01       	movw	r24, r14
     a8c:	0e 94 c6 0a 	call	0x158c	; 0x158c <u8g2_SetupBuffer>
}
     a90:	0f 90       	pop	r0
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	08 95       	ret

00000aa4 <u8g2_font_get_word>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
     aa4:	fc 01       	movw	r30, r24
     aa6:	e6 0f       	add	r30, r22
     aa8:	f1 1d       	adc	r31, r1
     aaa:	84 91       	lpm	r24, Z
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	98 2f       	mov	r25, r24
     ab0:	88 27       	eor	r24, r24
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	e4 91       	lpm	r30, Z
     ab6:	8e 0f       	add	r24, r30
     ab8:	91 1d       	adc	r25, r1
     aba:	08 95       	ret

00000abc <u8g2_add_vector_y>:
     abc:	21 30       	cpi	r18, 0x01	; 1
     abe:	31 f0       	breq	.+12     	; 0xacc <u8g2_add_vector_y+0x10>
     ac0:	18 f0       	brcs	.+6      	; 0xac8 <u8g2_add_vector_y+0xc>
     ac2:	22 30       	cpi	r18, 0x02	; 2
     ac4:	29 f0       	breq	.+10     	; 0xad0 <u8g2_add_vector_y+0x14>
     ac6:	06 c0       	rjmp	.+12     	; 0xad4 <u8g2_add_vector_y+0x18>
     ac8:	84 0f       	add	r24, r20
     aca:	08 95       	ret
     acc:	86 0f       	add	r24, r22
     ace:	08 95       	ret
     ad0:	84 1b       	sub	r24, r20
     ad2:	08 95       	ret
     ad4:	86 1b       	sub	r24, r22
     ad6:	08 95       	ret

00000ad8 <u8g2_add_vector_x>:
     ad8:	21 30       	cpi	r18, 0x01	; 1
     ada:	31 f0       	breq	.+12     	; 0xae8 <u8g2_add_vector_x+0x10>
     adc:	18 f0       	brcs	.+6      	; 0xae4 <u8g2_add_vector_x+0xc>
     ade:	22 30       	cpi	r18, 0x02	; 2
     ae0:	29 f0       	breq	.+10     	; 0xaec <u8g2_add_vector_x+0x14>
     ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <u8g2_add_vector_x+0x18>
     ae4:	86 0f       	add	r24, r22
     ae6:	08 95       	ret
     ae8:	84 1b       	sub	r24, r20
     aea:	08 95       	ret
     aec:	86 1b       	sub	r24, r22
     aee:	08 95       	ret
     af0:	84 0f       	add	r24, r20
     af2:	08 95       	ret

00000af4 <u8g2_font_calc_vref_font>:
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	08 95       	ret

00000af8 <u8g2_read_font_info>:
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	ec 01       	movw	r28, r24
     b02:	8b 01       	movw	r16, r22
     b04:	fb 01       	movw	r30, r22
     b06:	84 91       	lpm	r24, Z
     b08:	88 83       	st	Y, r24
     b0a:	31 96       	adiw	r30, 0x01	; 1
     b0c:	e4 91       	lpm	r30, Z
     b0e:	e9 83       	std	Y+1, r30	; 0x01
     b10:	fb 01       	movw	r30, r22
     b12:	32 96       	adiw	r30, 0x02	; 2
     b14:	e4 91       	lpm	r30, Z
     b16:	ea 83       	std	Y+2, r30	; 0x02
     b18:	fb 01       	movw	r30, r22
     b1a:	33 96       	adiw	r30, 0x03	; 3
     b1c:	e4 91       	lpm	r30, Z
     b1e:	eb 83       	std	Y+3, r30	; 0x03
     b20:	fb 01       	movw	r30, r22
     b22:	34 96       	adiw	r30, 0x04	; 4
     b24:	e4 91       	lpm	r30, Z
     b26:	ec 83       	std	Y+4, r30	; 0x04
     b28:	fb 01       	movw	r30, r22
     b2a:	35 96       	adiw	r30, 0x05	; 5
     b2c:	e4 91       	lpm	r30, Z
     b2e:	ed 83       	std	Y+5, r30	; 0x05
     b30:	fb 01       	movw	r30, r22
     b32:	36 96       	adiw	r30, 0x06	; 6
     b34:	e4 91       	lpm	r30, Z
     b36:	ee 83       	std	Y+6, r30	; 0x06
     b38:	fb 01       	movw	r30, r22
     b3a:	37 96       	adiw	r30, 0x07	; 7
     b3c:	e4 91       	lpm	r30, Z
     b3e:	ef 83       	std	Y+7, r30	; 0x07
     b40:	fb 01       	movw	r30, r22
     b42:	38 96       	adiw	r30, 0x08	; 8
     b44:	e4 91       	lpm	r30, Z
     b46:	e8 87       	std	Y+8, r30	; 0x08
     b48:	fb 01       	movw	r30, r22
     b4a:	39 96       	adiw	r30, 0x09	; 9
     b4c:	e4 91       	lpm	r30, Z
     b4e:	e9 87       	std	Y+9, r30	; 0x09
     b50:	fb 01       	movw	r30, r22
     b52:	3a 96       	adiw	r30, 0x0a	; 10
     b54:	e4 91       	lpm	r30, Z
     b56:	ea 87       	std	Y+10, r30	; 0x0a
     b58:	fb 01       	movw	r30, r22
     b5a:	3b 96       	adiw	r30, 0x0b	; 11
     b5c:	e4 91       	lpm	r30, Z
     b5e:	eb 87       	std	Y+11, r30	; 0x0b
     b60:	fb 01       	movw	r30, r22
     b62:	3c 96       	adiw	r30, 0x0c	; 12
     b64:	e4 91       	lpm	r30, Z
     b66:	ec 87       	std	Y+12, r30	; 0x0c
     b68:	fb 01       	movw	r30, r22
     b6a:	3d 96       	adiw	r30, 0x0d	; 13
     b6c:	e4 91       	lpm	r30, Z
     b6e:	ed 87       	std	Y+13, r30	; 0x0d
     b70:	fb 01       	movw	r30, r22
     b72:	3e 96       	adiw	r30, 0x0e	; 14
     b74:	e4 91       	lpm	r30, Z
     b76:	ee 87       	std	Y+14, r30	; 0x0e
     b78:	fb 01       	movw	r30, r22
     b7a:	3f 96       	adiw	r30, 0x0f	; 15
     b7c:	e4 91       	lpm	r30, Z
     b7e:	ef 87       	std	Y+15, r30	; 0x0f
     b80:	fb 01       	movw	r30, r22
     b82:	70 96       	adiw	r30, 0x10	; 16
     b84:	e4 91       	lpm	r30, Z
     b86:	e8 8b       	std	Y+16, r30	; 0x10
     b88:	61 e1       	ldi	r22, 0x11	; 17
     b8a:	c8 01       	movw	r24, r16
     b8c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <u8g2_font_get_word>
     b90:	9a 8b       	std	Y+18, r25	; 0x12
     b92:	89 8b       	std	Y+17, r24	; 0x11
     b94:	63 e1       	ldi	r22, 0x13	; 19
     b96:	c8 01       	movw	r24, r16
     b98:	0e 94 52 05 	call	0xaa4	; 0xaa4 <u8g2_font_get_word>
     b9c:	9c 8b       	std	Y+20, r25	; 0x14
     b9e:	8b 8b       	std	Y+19, r24	; 0x13
     ba0:	65 e1       	ldi	r22, 0x15	; 21
     ba2:	c8 01       	movw	r24, r16
     ba4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <u8g2_font_get_word>
     ba8:	9e 8b       	std	Y+22, r25	; 0x16
     baa:	8d 8b       	std	Y+21, r24	; 0x15
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	08 95       	ret

00000bb6 <u8g2_font_decode_get_unsigned_bits>:
     bb6:	dc 01       	movw	r26, r24
     bb8:	18 96       	adiw	r26, 0x08	; 8
     bba:	9c 91       	ld	r25, X
     bbc:	18 97       	sbiw	r26, 0x08	; 8
     bbe:	ed 91       	ld	r30, X+
     bc0:	fc 91       	ld	r31, X
     bc2:	11 97       	sbiw	r26, 0x01	; 1
     bc4:	24 91       	lpm	r18, Z
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	09 2e       	mov	r0, r25
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <u8g2_font_decode_get_unsigned_bits+0x1a>
     bcc:	35 95       	asr	r19
     bce:	27 95       	ror	r18
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <u8g2_font_decode_get_unsigned_bits+0x16>
     bd4:	89 2f       	mov	r24, r25
     bd6:	86 0f       	add	r24, r22
     bd8:	88 30       	cpi	r24, 0x08	; 8
     bda:	10 f4       	brcc	.+4      	; 0xbe0 <u8g2_font_decode_get_unsigned_bits+0x2a>
     bdc:	e2 2f       	mov	r30, r18
     bde:	0f c0       	rjmp	.+30     	; 0xbfe <u8g2_font_decode_get_unsigned_bits+0x48>
     be0:	31 96       	adiw	r30, 0x01	; 1
     be2:	11 96       	adiw	r26, 0x01	; 1
     be4:	fc 93       	st	X, r31
     be6:	ee 93       	st	-X, r30
     be8:	e4 91       	lpm	r30, Z
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	38 e0       	ldi	r19, 0x08	; 8
     bee:	39 1b       	sub	r19, r25
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <u8g2_font_decode_get_unsigned_bits+0x40>
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	3a 95       	dec	r19
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <u8g2_font_decode_get_unsigned_bits+0x3c>
     bfa:	e2 2b       	or	r30, r18
     bfc:	88 50       	subi	r24, 0x08	; 8
     bfe:	18 96       	adiw	r26, 0x08	; 8
     c00:	8c 93       	st	X, r24
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <u8g2_font_decode_get_unsigned_bits+0x56>
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	6a 95       	dec	r22
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <u8g2_font_decode_get_unsigned_bits+0x52>
     c10:	81 50       	subi	r24, 0x01	; 1
     c12:	8e 23       	and	r24, r30
     c14:	08 95       	ret

00000c16 <u8g2_font_setup_decode>:
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	ec 01       	movw	r28, r24
     c20:	8c 01       	movw	r16, r24
     c22:	06 5c       	subi	r16, 0xC6	; 198
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	7b af       	std	Y+59, r23	; 0x3b
     c28:	6a af       	std	Y+58, r22	; 0x3a
     c2a:	fc 01       	movw	r30, r24
     c2c:	ee 5b       	subi	r30, 0xBE	; 190
     c2e:	ff 4f       	sbci	r31, 0xFF	; 255
     c30:	10 82       	st	Z, r1
     c32:	39 96       	adiw	r30, 0x09	; 9
     c34:	60 81       	ld	r22, Z
     c36:	c8 01       	movw	r24, r16
     c38:	0e 94 db 05 	call	0xbb6	; 0xbb6 <u8g2_font_decode_get_unsigned_bits>
     c3c:	fe 01       	movw	r30, r28
     c3e:	e0 5c       	subi	r30, 0xC0	; 192
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	80 83       	st	Z, r24
     c44:	3c 96       	adiw	r30, 0x0c	; 12
     c46:	60 81       	ld	r22, Z
     c48:	c8 01       	movw	r24, r16
     c4a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <u8g2_font_decode_get_unsigned_bits>
     c4e:	fe 01       	movw	r30, r28
     c50:	ef 5b       	subi	r30, 0xBF	; 191
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	80 83       	st	Z, r24
     c56:	b3 96       	adiw	r30, 0x23	; 35
     c58:	80 81       	ld	r24, Z
     c5a:	b0 97       	sbiw	r30, 0x20	; 32
     c5c:	80 83       	st	Z, r24
     c5e:	cb 5b       	subi	r28, 0xBB	; 187
     c60:	df 4f       	sbci	r29, 0xFF	; 255
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	81 11       	cpse	r24, r1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	98 83       	st	Y, r25
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	08 95       	ret

00000c74 <u8g2_font_decode_get_signed_bits>:
     c74:	cf 93       	push	r28
     c76:	c6 2f       	mov	r28, r22
     c78:	0e 94 db 05 	call	0xbb6	; 0xbb6 <u8g2_font_decode_get_unsigned_bits>
     c7c:	c1 50       	subi	r28, 0x01	; 1
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <u8g2_font_decode_get_signed_bits+0x14>
     c84:	22 0f       	add	r18, r18
     c86:	33 1f       	adc	r19, r19
     c88:	ca 95       	dec	r28
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <u8g2_font_decode_get_signed_bits+0x10>
     c8c:	82 1b       	sub	r24, r18
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <u8g2_font_decode_len>:
     c92:	2f 92       	push	r2
     c94:	3f 92       	push	r3
     c96:	4f 92       	push	r4
     c98:	5f 92       	push	r5
     c9a:	6f 92       	push	r6
     c9c:	7f 92       	push	r7
     c9e:	8f 92       	push	r8
     ca0:	9f 92       	push	r9
     ca2:	af 92       	push	r10
     ca4:	bf 92       	push	r11
     ca6:	cf 92       	push	r12
     ca8:	df 92       	push	r13
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	28 97       	sbiw	r28, 0x08	; 8
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	7c 01       	movw	r14, r24
     cc8:	68 87       	std	Y+8, r22	; 0x08
     cca:	34 2e       	mov	r3, r20
     ccc:	fc 01       	movw	r30, r24
     cce:	76 ac       	ldd	r7, Z+62	; 0x3e
     cd0:	17 ad       	ldd	r17, Z+63	; 0x3f
     cd2:	5c 01       	movw	r10, r24
     cd4:	f0 e4       	ldi	r31, 0x40	; 64
     cd6:	af 0e       	add	r10, r31
     cd8:	b1 1c       	adc	r11, r1
     cda:	6c 01       	movw	r12, r24
     cdc:	86 e4       	ldi	r24, 0x46	; 70
     cde:	c8 0e       	add	r12, r24
     ce0:	d1 1c       	adc	r13, r1
     ce2:	47 01       	movw	r8, r14
     ce4:	93 e4       	ldi	r25, 0x43	; 67
     ce6:	89 0e       	add	r8, r25
     ce8:	91 1c       	adc	r9, r1
     cea:	f7 01       	movw	r30, r14
     cec:	ec 59       	subi	r30, 0x9C	; 156
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	fa 83       	std	Y+2, r31	; 0x02
     cf2:	e9 83       	std	Y+1, r30	; 0x01
     cf4:	c7 01       	movw	r24, r14
     cf6:	8b 5b       	subi	r24, 0xBB	; 187
     cf8:	9f 4f       	sbci	r25, 0xFF	; 255
     cfa:	9e 83       	std	Y+6, r25	; 0x06
     cfc:	8d 83       	std	Y+5, r24	; 0x05
     cfe:	b0 97       	sbiw	r30, 0x20	; 32
     d00:	fc 83       	std	Y+4, r31	; 0x04
     d02:	eb 83       	std	Y+3, r30	; 0x03
     d04:	f5 01       	movw	r30, r10
     d06:	f0 81       	ld	r31, Z
     d08:	f7 19       	sub	r31, r7
     d0a:	ff 83       	std	Y+7, r31	; 0x07
     d0c:	58 84       	ldd	r5, Y+8	; 0x08
     d0e:	f5 15       	cp	r31, r5
     d10:	08 f4       	brcc	.+2      	; 0xd14 <u8g2_font_decode_len+0x82>
     d12:	5f 2e       	mov	r5, r31
     d14:	f7 01       	movw	r30, r14
     d16:	65 ac       	ldd	r6, Z+61	; 0x3d
     d18:	f6 01       	movw	r30, r12
     d1a:	00 81       	ld	r16, Z
     d1c:	21 2e       	mov	r2, r17
     d1e:	20 2f       	mov	r18, r16
     d20:	41 2f       	mov	r20, r17
     d22:	67 2d       	mov	r22, r7
     d24:	f7 01       	movw	r30, r14
     d26:	84 ad       	ldd	r24, Z+60	; 0x3c
     d28:	0e 94 6c 05 	call	0xad8	; 0xad8 <u8g2_add_vector_x>
     d2c:	48 2e       	mov	r4, r24
     d2e:	20 2f       	mov	r18, r16
     d30:	41 2f       	mov	r20, r17
     d32:	67 2d       	mov	r22, r7
     d34:	86 2d       	mov	r24, r6
     d36:	0e 94 5e 05 	call	0xabc	; 0xabc <u8g2_add_vector_y>
     d3a:	33 20       	and	r3, r3
     d3c:	69 f0       	breq	.+26     	; 0xd58 <u8g2_font_decode_len+0xc6>
     d3e:	eb 81       	ldd	r30, Y+3	; 0x03
     d40:	fc 81       	ldd	r31, Y+4	; 0x04
     d42:	90 81       	ld	r25, Z
     d44:	e9 81       	ldd	r30, Y+1	; 0x01
     d46:	fa 81       	ldd	r31, Y+2	; 0x02
     d48:	90 83       	st	Z, r25
     d4a:	25 2d       	mov	r18, r5
     d4c:	48 2f       	mov	r20, r24
     d4e:	64 2d       	mov	r22, r4
     d50:	c7 01       	movw	r24, r14
     d52:	0e 94 31 09 	call	0x1262	; 0x1262 <u8g2_DrawHVLine>
     d56:	10 c0       	rjmp	.+32     	; 0xd78 <u8g2_font_decode_len+0xe6>
     d58:	f4 01       	movw	r30, r8
     d5a:	90 81       	ld	r25, Z
     d5c:	91 11       	cpse	r25, r1
     d5e:	0c c0       	rjmp	.+24     	; 0xd78 <u8g2_font_decode_len+0xe6>
     d60:	ed 81       	ldd	r30, Y+5	; 0x05
     d62:	fe 81       	ldd	r31, Y+6	; 0x06
     d64:	90 81       	ld	r25, Z
     d66:	e9 81       	ldd	r30, Y+1	; 0x01
     d68:	fa 81       	ldd	r31, Y+2	; 0x02
     d6a:	90 83       	st	Z, r25
     d6c:	25 2d       	mov	r18, r5
     d6e:	48 2f       	mov	r20, r24
     d70:	64 2d       	mov	r22, r4
     d72:	c7 01       	movw	r24, r14
     d74:	0e 94 31 09 	call	0x1262	; 0x1262 <u8g2_DrawHVLine>
     d78:	f8 85       	ldd	r31, Y+8	; 0x08
     d7a:	8f 81       	ldd	r24, Y+7	; 0x07
     d7c:	f8 17       	cp	r31, r24
     d7e:	28 f0       	brcs	.+10     	; 0xd8a <u8g2_font_decode_len+0xf8>
     d80:	f8 1b       	sub	r31, r24
     d82:	f8 87       	std	Y+8, r31	; 0x08
     d84:	1f 5f       	subi	r17, 0xFF	; 255
     d86:	71 2c       	mov	r7, r1
     d88:	bd cf       	rjmp	.-134    	; 0xd04 <u8g2_font_decode_len+0x72>
     d8a:	88 85       	ldd	r24, Y+8	; 0x08
     d8c:	87 0d       	add	r24, r7
     d8e:	f7 01       	movw	r30, r14
     d90:	86 af       	std	Z+62, r24	; 0x3e
     d92:	27 ae       	std	Z+63, r2	; 0x3f
     d94:	28 96       	adiw	r28, 0x08	; 8
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	bf 90       	pop	r11
     db2:	af 90       	pop	r10
     db4:	9f 90       	pop	r9
     db6:	8f 90       	pop	r8
     db8:	7f 90       	pop	r7
     dba:	6f 90       	pop	r6
     dbc:	5f 90       	pop	r5
     dbe:	4f 90       	pop	r4
     dc0:	3f 90       	pop	r3
     dc2:	2f 90       	pop	r2
     dc4:	08 95       	ret

00000dc6 <u8g2_font_decode_glyph>:
     dc6:	8f 92       	push	r8
     dc8:	9f 92       	push	r9
     dca:	af 92       	push	r10
     dcc:	bf 92       	push	r11
     dce:	cf 92       	push	r12
     dd0:	df 92       	push	r13
     dd2:	ef 92       	push	r14
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	ec 01       	movw	r28, r24
     de0:	7c 01       	movw	r14, r24
     de2:	8a e3       	ldi	r24, 0x3A	; 58
     de4:	e8 0e       	add	r14, r24
     de6:	f1 1c       	adc	r15, r1
     de8:	ce 01       	movw	r24, r28
     dea:	0e 94 0b 06 	call	0xc16	; 0xc16 <u8g2_font_setup_decode>
     dee:	fe 01       	movw	r30, r28
     df0:	ef 5b       	subi	r30, 0xBF	; 191
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	90 80       	ld	r9, Z
     df6:	3c 96       	adiw	r30, 0x0c	; 12
     df8:	60 81       	ld	r22, Z
     dfa:	c7 01       	movw	r24, r14
     dfc:	0e 94 3a 06 	call	0xc74	; 0xc74 <u8g2_font_decode_get_signed_bits>
     e00:	b8 2e       	mov	r11, r24
     e02:	fe 01       	movw	r30, r28
     e04:	e2 5b       	subi	r30, 0xB2	; 178
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	60 81       	ld	r22, Z
     e0a:	c7 01       	movw	r24, r14
     e0c:	0e 94 3a 06 	call	0xc74	; 0xc74 <u8g2_font_decode_get_signed_bits>
     e10:	18 2f       	mov	r17, r24
     e12:	fe 01       	movw	r30, r28
     e14:	e1 5b       	subi	r30, 0xB1	; 177
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	60 81       	ld	r22, Z
     e1a:	c7 01       	movw	r24, r14
     e1c:	0e 94 3a 06 	call	0xc74	; 0xc74 <u8g2_font_decode_get_signed_bits>
     e20:	88 2e       	mov	r8, r24
     e22:	fe 01       	movw	r30, r28
     e24:	e0 5c       	subi	r30, 0xC0	; 192
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	d0 80       	ld	r13, Z
     e2a:	1d 14       	cp	r1, r13
     e2c:	0c f0       	brlt	.+2      	; 0xe30 <u8g2_font_decode_glyph+0x6a>
     e2e:	77 c0       	rjmp	.+238    	; 0xf1e <u8g2_font_decode_glyph+0x158>
     e30:	36 96       	adiw	r30, 0x06	; 6
     e32:	00 81       	ld	r16, Z
     e34:	19 0d       	add	r17, r9
     e36:	11 95       	neg	r17
     e38:	20 2f       	mov	r18, r16
     e3a:	41 2f       	mov	r20, r17
     e3c:	6b 2d       	mov	r22, r11
     e3e:	8c ad       	ldd	r24, Y+60	; 0x3c
     e40:	0e 94 6c 05 	call	0xad8	; 0xad8 <u8g2_add_vector_x>
     e44:	c8 2e       	mov	r12, r24
     e46:	8c af       	std	Y+60, r24	; 0x3c
     e48:	20 2f       	mov	r18, r16
     e4a:	41 2f       	mov	r20, r17
     e4c:	6b 2d       	mov	r22, r11
     e4e:	8d ad       	ldd	r24, Y+61	; 0x3d
     e50:	0e 94 5e 05 	call	0xabc	; 0xabc <u8g2_add_vector_y>
     e54:	8d af       	std	Y+61, r24	; 0x3d
     e56:	01 30       	cpi	r16, 0x01	; 1
     e58:	59 f0       	breq	.+22     	; 0xe70 <u8g2_font_decode_glyph+0xaa>
     e5a:	28 f0       	brcs	.+10     	; 0xe66 <u8g2_font_decode_glyph+0xa0>
     e5c:	02 30       	cpi	r16, 0x02	; 2
     e5e:	91 f0       	breq	.+36     	; 0xe84 <u8g2_font_decode_glyph+0xbe>
     e60:	03 30       	cpi	r16, 0x03	; 3
     e62:	d9 f0       	breq	.+54     	; 0xe9a <u8g2_font_decode_glyph+0xd4>
     e64:	23 c0       	rjmp	.+70     	; 0xeac <u8g2_font_decode_glyph+0xe6>
     e66:	2d 2d       	mov	r18, r13
     e68:	2c 0d       	add	r18, r12
     e6a:	09 2d       	mov	r16, r9
     e6c:	08 0f       	add	r16, r24
     e6e:	20 c0       	rjmp	.+64     	; 0xeb0 <u8g2_font_decode_glyph+0xea>
     e70:	9c 2d       	mov	r25, r12
     e72:	99 19       	sub	r25, r9
     e74:	21 e0       	ldi	r18, 0x01	; 1
     e76:	2c 0d       	add	r18, r12
     e78:	0d 2d       	mov	r16, r13
     e7a:	08 0f       	add	r16, r24
     e7c:	cc 24       	eor	r12, r12
     e7e:	c3 94       	inc	r12
     e80:	c9 0e       	add	r12, r25
     e82:	16 c0       	rjmp	.+44     	; 0xeb0 <u8g2_font_decode_glyph+0xea>
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	39 2f       	mov	r19, r25
     e88:	3d 19       	sub	r19, r13
     e8a:	21 e0       	ldi	r18, 0x01	; 1
     e8c:	2c 0d       	add	r18, r12
     e8e:	99 19       	sub	r25, r9
     e90:	01 e0       	ldi	r16, 0x01	; 1
     e92:	08 0f       	add	r16, r24
     e94:	89 0f       	add	r24, r25
     e96:	c3 0e       	add	r12, r19
     e98:	0b c0       	rjmp	.+22     	; 0xeb0 <u8g2_font_decode_glyph+0xea>
     e9a:	29 2d       	mov	r18, r9
     e9c:	2c 0d       	add	r18, r12
     e9e:	98 2f       	mov	r25, r24
     ea0:	9d 19       	sub	r25, r13
     ea2:	01 e0       	ldi	r16, 0x01	; 1
     ea4:	08 0f       	add	r16, r24
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	89 0f       	add	r24, r25
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <u8g2_font_decode_glyph+0xea>
     eac:	08 2f       	mov	r16, r24
     eae:	2c 2d       	mov	r18, r12
     eb0:	48 2f       	mov	r20, r24
     eb2:	6c 2d       	mov	r22, r12
     eb4:	ce 01       	movw	r24, r28
     eb6:	0e 94 b4 09 	call	0x1368	; 0x1368 <u8g2_IsIntersection>
     eba:	88 23       	and	r24, r24
     ebc:	81 f1       	breq	.+96     	; 0xf1e <u8g2_font_decode_glyph+0x158>
     ebe:	1e ae       	std	Y+62, r1	; 0x3e
     ec0:	1f ae       	std	Y+63, r1	; 0x3f
     ec2:	5e 01       	movw	r10, r28
     ec4:	e9 e4       	ldi	r30, 0x49	; 73
     ec6:	ae 0e       	add	r10, r30
     ec8:	b1 1c       	adc	r11, r1
     eca:	6e 01       	movw	r12, r28
     ecc:	fa e4       	ldi	r31, 0x4A	; 74
     ece:	cf 0e       	add	r12, r31
     ed0:	d1 1c       	adc	r13, r1
     ed2:	f5 01       	movw	r30, r10
     ed4:	60 81       	ld	r22, Z
     ed6:	c7 01       	movw	r24, r14
     ed8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <u8g2_font_decode_get_unsigned_bits>
     edc:	08 2f       	mov	r16, r24
     ede:	f6 01       	movw	r30, r12
     ee0:	60 81       	ld	r22, Z
     ee2:	c7 01       	movw	r24, r14
     ee4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <u8g2_font_decode_get_unsigned_bits>
     ee8:	18 2f       	mov	r17, r24
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	60 2f       	mov	r22, r16
     eee:	ce 01       	movw	r24, r28
     ef0:	0e 94 49 06 	call	0xc92	; 0xc92 <u8g2_font_decode_len>
     ef4:	41 e0       	ldi	r20, 0x01	; 1
     ef6:	61 2f       	mov	r22, r17
     ef8:	ce 01       	movw	r24, r28
     efa:	0e 94 49 06 	call	0xc92	; 0xc92 <u8g2_font_decode_len>
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	c7 01       	movw	r24, r14
     f02:	0e 94 db 05 	call	0xbb6	; 0xbb6 <u8g2_font_decode_get_unsigned_bits>
     f06:	81 11       	cpse	r24, r1
     f08:	f0 cf       	rjmp	.-32     	; 0xeea <u8g2_font_decode_glyph+0x124>
     f0a:	8f ad       	ldd	r24, Y+63	; 0x3f
     f0c:	89 15       	cp	r24, r9
     f0e:	0c f3       	brlt	.-62     	; 0xed2 <u8g2_font_decode_glyph+0x10c>
     f10:	fe 01       	movw	r30, r28
     f12:	ec 59       	subi	r30, 0x9C	; 156
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	cc 5b       	subi	r28, 0xBC	; 188
     f18:	df 4f       	sbci	r29, 0xFF	; 255
     f1a:	88 81       	ld	r24, Y
     f1c:	80 83       	st	Z, r24
     f1e:	88 2d       	mov	r24, r8
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	df 90       	pop	r13
     f2e:	cf 90       	pop	r12
     f30:	bf 90       	pop	r11
     f32:	af 90       	pop	r10
     f34:	9f 90       	pop	r9
     f36:	8f 90       	pop	r8
     f38:	08 95       	ret

00000f3a <u8g2_font_get_glyph_data>:
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	fc 01       	movw	r30, r24
     f48:	c6 a9       	ldd	r28, Z+54	; 0x36
     f4a:	d7 a9       	ldd	r29, Z+55	; 0x37
     f4c:	67 96       	adiw	r28, 0x17	; 23
     f4e:	6f 3f       	cpi	r22, 0xFF	; 255
     f50:	71 05       	cpc	r23, r1
     f52:	11 f0       	breq	.+4      	; 0xf58 <u8g2_font_get_glyph_data+0x1e>
     f54:	08 f0       	brcs	.+2      	; 0xf58 <u8g2_font_get_glyph_data+0x1e>
     f56:	36 c0       	rjmp	.+108    	; 0xfc4 <u8g2_font_get_glyph_data+0x8a>
     f58:	61 36       	cpi	r22, 0x61	; 97
     f5a:	71 05       	cpc	r23, r1
     f5c:	38 f0       	brcs	.+14     	; 0xf6c <u8g2_font_get_glyph_data+0x32>
     f5e:	e6 5a       	subi	r30, 0xA6	; 166
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	80 81       	ld	r24, Z
     f64:	91 81       	ldd	r25, Z+1	; 0x01
     f66:	c8 0f       	add	r28, r24
     f68:	d9 1f       	adc	r29, r25
     f6a:	0a c0       	rjmp	.+20     	; 0xf80 <u8g2_font_get_glyph_data+0x46>
     f6c:	61 34       	cpi	r22, 0x41	; 65
     f6e:	71 05       	cpc	r23, r1
     f70:	38 f0       	brcs	.+14     	; 0xf80 <u8g2_font_get_glyph_data+0x46>
     f72:	fc 01       	movw	r30, r24
     f74:	e8 5a       	subi	r30, 0xA8	; 168
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	80 81       	ld	r24, Z
     f7a:	91 81       	ldd	r25, Z+1	; 0x01
     f7c:	c8 0f       	add	r28, r24
     f7e:	d9 1f       	adc	r29, r25
     f80:	ce 01       	movw	r24, r28
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	fc 01       	movw	r30, r24
     f86:	24 91       	lpm	r18, Z
     f88:	22 23       	and	r18, r18
     f8a:	09 f4       	brne	.+2      	; 0xf8e <u8g2_font_get_glyph_data+0x54>
     f8c:	5a c0       	rjmp	.+180    	; 0x1042 <u8g2_font_get_glyph_data+0x108>
     f8e:	fe 01       	movw	r30, r28
     f90:	24 91       	lpm	r18, Z
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	62 17       	cp	r22, r18
     f96:	73 07       	cpc	r23, r19
     f98:	51 f4       	brne	.+20     	; 0xfae <u8g2_font_get_glyph_data+0x74>
     f9a:	06 c0       	rjmp	.+12     	; 0xfa8 <u8g2_font_get_glyph_data+0x6e>
     f9c:	fe 01       	movw	r30, r28
     f9e:	24 91       	lpm	r18, Z
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	62 17       	cp	r22, r18
     fa4:	73 07       	cpc	r23, r19
     fa6:	19 f4       	brne	.+6      	; 0xfae <u8g2_font_get_glyph_data+0x74>
     fa8:	ce 01       	movw	r24, r28
     faa:	02 96       	adiw	r24, 0x02	; 2
     fac:	52 c0       	rjmp	.+164    	; 0x1052 <u8g2_font_get_glyph_data+0x118>
     fae:	fc 01       	movw	r30, r24
     fb0:	84 91       	lpm	r24, Z
     fb2:	c8 0f       	add	r28, r24
     fb4:	d1 1d       	adc	r29, r1
     fb6:	ce 01       	movw	r24, r28
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	fc 01       	movw	r30, r24
     fbc:	24 91       	lpm	r18, Z
     fbe:	21 11       	cpse	r18, r1
     fc0:	ed cf       	rjmp	.-38     	; 0xf9c <u8g2_font_get_glyph_data+0x62>
     fc2:	42 c0       	rjmp	.+132    	; 0x1048 <u8g2_font_get_glyph_data+0x10e>
     fc4:	8b 01       	movw	r16, r22
     fc6:	fc 01       	movw	r30, r24
     fc8:	e4 5a       	subi	r30, 0xA4	; 164
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	80 81       	ld	r24, Z
     fce:	91 81       	ldd	r25, Z+1	; 0x01
     fd0:	c8 0f       	add	r28, r24
     fd2:	d9 1f       	adc	r29, r25
     fd4:	7e 01       	movw	r14, r28
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	c7 01       	movw	r24, r14
     fda:	0e 94 52 05 	call	0xaa4	; 0xaa4 <u8g2_font_get_word>
     fde:	c8 0f       	add	r28, r24
     fe0:	d9 1f       	adc	r29, r25
     fe2:	62 e0       	ldi	r22, 0x02	; 2
     fe4:	c7 01       	movw	r24, r14
     fe6:	0e 94 52 05 	call	0xaa4	; 0xaa4 <u8g2_font_get_word>
     fea:	f4 e0       	ldi	r31, 0x04	; 4
     fec:	ef 0e       	add	r14, r31
     fee:	f1 1c       	adc	r15, r1
     ff0:	80 17       	cp	r24, r16
     ff2:	91 07       	cpc	r25, r17
     ff4:	80 f3       	brcs	.-32     	; 0xfd6 <u8g2_font_get_glyph_data+0x9c>
     ff6:	fe 01       	movw	r30, r28
     ff8:	84 91       	lpm	r24, Z
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	98 2f       	mov	r25, r24
     ffe:	88 27       	eor	r24, r24
    1000:	31 96       	adiw	r30, 0x01	; 1
    1002:	e4 91       	lpm	r30, Z
    1004:	8e 2b       	or	r24, r30
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	11 f1       	breq	.+68     	; 0x104e <u8g2_font_get_glyph_data+0x114>
    100a:	08 17       	cp	r16, r24
    100c:	19 07       	cpc	r17, r25
    100e:	39 f4       	brne	.+14     	; 0x101e <u8g2_font_get_glyph_data+0xe4>
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <u8g2_font_get_glyph_data+0xde>
    1012:	08 17       	cp	r16, r24
    1014:	19 07       	cpc	r17, r25
    1016:	19 f4       	brne	.+6      	; 0x101e <u8g2_font_get_glyph_data+0xe4>
    1018:	ce 01       	movw	r24, r28
    101a:	03 96       	adiw	r24, 0x03	; 3
    101c:	1a c0       	rjmp	.+52     	; 0x1052 <u8g2_font_get_glyph_data+0x118>
    101e:	fe 01       	movw	r30, r28
    1020:	32 96       	adiw	r30, 0x02	; 2
    1022:	e4 91       	lpm	r30, Z
    1024:	ce 0f       	add	r28, r30
    1026:	d1 1d       	adc	r29, r1
    1028:	fe 01       	movw	r30, r28
    102a:	84 91       	lpm	r24, Z
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	98 2f       	mov	r25, r24
    1030:	88 27       	eor	r24, r24
    1032:	31 96       	adiw	r30, 0x01	; 1
    1034:	e4 91       	lpm	r30, Z
    1036:	8e 2b       	or	r24, r30
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	59 f7       	brne	.-42     	; 0x1012 <u8g2_font_get_glyph_data+0xd8>
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	08 c0       	rjmp	.+16     	; 0x1052 <u8g2_font_get_glyph_data+0x118>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	05 c0       	rjmp	.+10     	; 0x1052 <u8g2_font_get_glyph_data+0x118>
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <u8g2_font_get_glyph_data+0x118>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	08 95       	ret

00001060 <u8g2_DrawGlyph>:
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	ec 01       	movw	r28, r24
    106e:	06 2f       	mov	r16, r22
    1070:	14 2f       	mov	r17, r20
    1072:	79 01       	movw	r14, r18
    1074:	fc 01       	movw	r30, r24
    1076:	ea 5b       	subi	r30, 0xBA	; 186
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	80 81       	ld	r24, Z
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	61 f0       	breq	.+24     	; 0x1098 <u8g2_DrawGlyph+0x38>
    1080:	28 f0       	brcs	.+10     	; 0x108c <u8g2_DrawGlyph+0x2c>
    1082:	82 30       	cpi	r24, 0x02	; 2
    1084:	79 f0       	breq	.+30     	; 0x10a4 <u8g2_DrawGlyph+0x44>
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	99 f0       	breq	.+38     	; 0x10b0 <u8g2_DrawGlyph+0x50>
    108a:	17 c0       	rjmp	.+46     	; 0x10ba <u8g2_DrawGlyph+0x5a>
    108c:	e8 ad       	ldd	r30, Y+56	; 0x38
    108e:	f9 ad       	ldd	r31, Y+57	; 0x39
    1090:	ce 01       	movw	r24, r28
    1092:	09 95       	icall
    1094:	18 0f       	add	r17, r24
    1096:	11 c0       	rjmp	.+34     	; 0x10ba <u8g2_DrawGlyph+0x5a>
    1098:	e8 ad       	ldd	r30, Y+56	; 0x38
    109a:	f9 ad       	ldd	r31, Y+57	; 0x39
    109c:	ce 01       	movw	r24, r28
    109e:	09 95       	icall
    10a0:	08 1b       	sub	r16, r24
    10a2:	0b c0       	rjmp	.+22     	; 0x10ba <u8g2_DrawGlyph+0x5a>
    10a4:	e8 ad       	ldd	r30, Y+56	; 0x38
    10a6:	f9 ad       	ldd	r31, Y+57	; 0x39
    10a8:	ce 01       	movw	r24, r28
    10aa:	09 95       	icall
    10ac:	18 1b       	sub	r17, r24
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <u8g2_DrawGlyph+0x5a>
    10b0:	e8 ad       	ldd	r30, Y+56	; 0x38
    10b2:	f9 ad       	ldd	r31, Y+57	; 0x39
    10b4:	ce 01       	movw	r24, r28
    10b6:	09 95       	icall
    10b8:	08 0f       	add	r16, r24
    10ba:	0c af       	std	Y+60, r16	; 0x3c
    10bc:	1d af       	std	Y+61, r17	; 0x3d
    10be:	b7 01       	movw	r22, r14
    10c0:	ce 01       	movw	r24, r28
    10c2:	0e 94 9d 07 	call	0xf3a	; 0xf3a <u8g2_font_get_glyph_data>
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	29 f0       	breq	.+10     	; 0x10d4 <u8g2_DrawGlyph+0x74>
    10ca:	bc 01       	movw	r22, r24
    10cc:	ce 01       	movw	r24, r28
    10ce:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <u8g2_font_decode_glyph>
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <u8g2_DrawGlyph+0x76>
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	08 95       	ret

000010e4 <u8g2_draw_string>:
    10e4:	bf 92       	push	r11
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	ec 01       	movw	r28, r24
    10f8:	b6 2e       	mov	r11, r22
    10fa:	c4 2e       	mov	r12, r20
    10fc:	e2 2e       	mov	r14, r18
    10fe:	f3 2e       	mov	r15, r19
    1100:	0e 94 00 0b 	call	0x1600	; 0x1600 <u8x8_utf8_init>
    1104:	0e 2d       	mov	r16, r14
    1106:	1f 2d       	mov	r17, r15
    1108:	d1 2c       	mov	r13, r1
    110a:	7e 01       	movw	r14, r28
    110c:	26 e4       	ldi	r18, 0x46	; 70
    110e:	e2 0e       	add	r14, r18
    1110:	f1 1c       	adc	r15, r1
    1112:	f8 01       	movw	r30, r16
    1114:	61 91       	ld	r22, Z+
    1116:	8f 01       	movw	r16, r30
    1118:	ea 81       	ldd	r30, Y+2	; 0x02
    111a:	fb 81       	ldd	r31, Y+3	; 0x03
    111c:	ce 01       	movw	r24, r28
    111e:	09 95       	icall
    1120:	8f 3f       	cpi	r24, 0xFF	; 255
    1122:	ff ef       	ldi	r31, 0xFF	; 255
    1124:	9f 07       	cpc	r25, r31
    1126:	e9 f0       	breq	.+58     	; 0x1162 <u8g2_draw_string+0x7e>
    1128:	8e 3f       	cpi	r24, 0xFE	; 254
    112a:	2f ef       	ldi	r18, 0xFF	; 255
    112c:	92 07       	cpc	r25, r18
    112e:	89 f3       	breq	.-30     	; 0x1112 <u8g2_draw_string+0x2e>
    1130:	9c 01       	movw	r18, r24
    1132:	4c 2d       	mov	r20, r12
    1134:	6b 2d       	mov	r22, r11
    1136:	ce 01       	movw	r24, r28
    1138:	0e 94 30 08 	call	0x1060	; 0x1060 <u8g2_DrawGlyph>
    113c:	f7 01       	movw	r30, r14
    113e:	90 81       	ld	r25, Z
    1140:	91 30       	cpi	r25, 0x01	; 1
    1142:	41 f0       	breq	.+16     	; 0x1154 <u8g2_draw_string+0x70>
    1144:	28 f0       	brcs	.+10     	; 0x1150 <u8g2_draw_string+0x6c>
    1146:	92 30       	cpi	r25, 0x02	; 2
    1148:	39 f0       	breq	.+14     	; 0x1158 <u8g2_draw_string+0x74>
    114a:	93 30       	cpi	r25, 0x03	; 3
    114c:	39 f0       	breq	.+14     	; 0x115c <u8g2_draw_string+0x78>
    114e:	07 c0       	rjmp	.+14     	; 0x115e <u8g2_draw_string+0x7a>
    1150:	b8 0e       	add	r11, r24
    1152:	05 c0       	rjmp	.+10     	; 0x115e <u8g2_draw_string+0x7a>
    1154:	c8 0e       	add	r12, r24
    1156:	03 c0       	rjmp	.+6      	; 0x115e <u8g2_draw_string+0x7a>
    1158:	b8 1a       	sub	r11, r24
    115a:	01 c0       	rjmp	.+2      	; 0x115e <u8g2_draw_string+0x7a>
    115c:	c8 1a       	sub	r12, r24
    115e:	d8 0e       	add	r13, r24
    1160:	d8 cf       	rjmp	.-80     	; 0x1112 <u8g2_draw_string+0x2e>
    1162:	8d 2d       	mov	r24, r13
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	bf 90       	pop	r11
    1176:	08 95       	ret

00001178 <u8g2_DrawStr>:
    1178:	e3 ef       	ldi	r30, 0xF3	; 243
    117a:	fa e0       	ldi	r31, 0x0A	; 10
    117c:	dc 01       	movw	r26, r24
    117e:	13 96       	adiw	r26, 0x03	; 3
    1180:	fc 93       	st	X, r31
    1182:	ee 93       	st	-X, r30
    1184:	12 97       	sbiw	r26, 0x02	; 2
    1186:	0e 94 72 08 	call	0x10e4	; 0x10e4 <u8g2_draw_string>
    118a:	08 95       	ret

0000118c <u8g2_UpdateRefHeight>:
    118c:	fc 01       	movw	r30, r24
    118e:	26 a9       	ldd	r18, Z+54	; 0x36
    1190:	37 a9       	ldd	r19, Z+55	; 0x37
    1192:	23 2b       	or	r18, r19
    1194:	e9 f1       	breq	.+122    	; 0x1210 <u8g2_UpdateRefHeight+0x84>
    1196:	ec 5a       	subi	r30, 0xAC	; 172
    1198:	ff 4f       	sbci	r31, 0xFF	; 255
    119a:	20 81       	ld	r18, Z
    119c:	3c 96       	adiw	r30, 0x0c	; 12
    119e:	20 83       	st	Z, r18
    11a0:	3b 97       	sbiw	r30, 0x0b	; 11
    11a2:	40 81       	ld	r20, Z
    11a4:	3c 96       	adiw	r30, 0x0c	; 12
    11a6:	40 83       	st	Z, r20
    11a8:	32 97       	sbiw	r30, 0x02	; 2
    11aa:	30 81       	ld	r19, Z
    11ac:	33 23       	and	r19, r19
    11ae:	81 f1       	breq	.+96     	; 0x1210 <u8g2_UpdateRefHeight+0x84>
    11b0:	31 30       	cpi	r19, 0x01	; 1
    11b2:	79 f4       	brne	.+30     	; 0x11d2 <u8g2_UpdateRefHeight+0x46>
    11b4:	39 97       	sbiw	r30, 0x09	; 9
    11b6:	30 81       	ld	r19, Z
    11b8:	23 17       	cp	r18, r19
    11ba:	14 f4       	brge	.+4      	; 0x11c0 <u8g2_UpdateRefHeight+0x34>
    11bc:	3a 96       	adiw	r30, 0x0a	; 10
    11be:	30 83       	st	Z, r19
    11c0:	fc 01       	movw	r30, r24
    11c2:	e9 5a       	subi	r30, 0xA9	; 169
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	20 81       	ld	r18, Z
    11c8:	24 17       	cp	r18, r20
    11ca:	14 f5       	brge	.+68     	; 0x1210 <u8g2_UpdateRefHeight+0x84>
    11cc:	3a 96       	adiw	r30, 0x0a	; 10
    11ce:	20 83       	st	Z, r18
    11d0:	08 95       	ret
    11d2:	fc 01       	movw	r30, r24
    11d4:	ef 5a       	subi	r30, 0xAF	; 175
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	e0 81       	ld	r30, Z
    11da:	dc 01       	movw	r26, r24
    11dc:	ad 5a       	subi	r26, 0xAD	; 173
    11de:	bf 4f       	sbci	r27, 0xFF	; 255
    11e0:	5c 91       	ld	r21, X
    11e2:	02 2e       	mov	r0, r18
    11e4:	00 0c       	add	r0, r0
    11e6:	33 0b       	sbc	r19, r19
    11e8:	65 2f       	mov	r22, r21
    11ea:	05 2e       	mov	r0, r21
    11ec:	00 0c       	add	r0, r0
    11ee:	77 0b       	sbc	r23, r23
    11f0:	6e 0f       	add	r22, r30
    11f2:	71 1d       	adc	r23, r1
    11f4:	e7 fd       	sbrc	r30, 7
    11f6:	7a 95       	dec	r23
    11f8:	26 17       	cp	r18, r22
    11fa:	37 07       	cpc	r19, r23
    11fc:	1c f4       	brge	.+6      	; 0x1204 <u8g2_UpdateRefHeight+0x78>
    11fe:	1d 96       	adiw	r26, 0x0d	; 13
    1200:	e5 0f       	add	r30, r21
    1202:	ec 93       	st	X, r30
    1204:	54 17       	cp	r21, r20
    1206:	24 f4       	brge	.+8      	; 0x1210 <u8g2_UpdateRefHeight+0x84>
    1208:	fc 01       	movw	r30, r24
    120a:	ef 59       	subi	r30, 0x9F	; 159
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	50 83       	st	Z, r21
    1210:	08 95       	ret

00001212 <u8g2_SetFontPosBaseline>:
    1212:	2a e7       	ldi	r18, 0x7A	; 122
    1214:	35 e0       	ldi	r19, 0x05	; 5
    1216:	fc 01       	movw	r30, r24
    1218:	31 af       	std	Z+57, r19	; 0x39
    121a:	20 af       	std	Z+56, r18	; 0x38
    121c:	08 95       	ret

0000121e <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
  if ( u8g2->font != font )
    1222:	fc 01       	movw	r30, r24
    1224:	26 a9       	ldd	r18, Z+54	; 0x36
    1226:	37 a9       	ldd	r19, Z+55	; 0x37
    1228:	26 17       	cp	r18, r22
    122a:	37 07       	cpc	r19, r23
    122c:	51 f0       	breq	.+20     	; 0x1242 <u8g2_SetFont+0x24>
    122e:	ec 01       	movw	r28, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    1230:	77 ab       	std	Z+55, r23	; 0x37
    1232:	66 ab       	std	Z+54, r22	; 0x36
    u8g2_read_font_info(&(u8g2->font_info), font);
    1234:	89 5b       	subi	r24, 0xB9	; 185
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    123c:	ce 01       	movw	r24, r28
    123e:	0e 94 c6 08 	call	0x118c	; 0x118c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	08 95       	ret

00001248 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1248:	0f 93       	push	r16
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    124a:	dc 01       	movw	r26, r24
    124c:	99 96       	adiw	r26, 0x29	; 41
    124e:	3c 91       	ld	r19, X
    1250:	99 97       	sbiw	r26, 0x29	; 41
    1252:	43 1b       	sub	r20, r19
    1254:	5f 96       	adiw	r26, 0x1f	; 31
    1256:	ed 91       	ld	r30, X+
    1258:	fc 91       	ld	r31, X
    125a:	90 97       	sbiw	r26, 0x20	; 32
    125c:	09 95       	icall
}
    125e:	0f 91       	pop	r16
    1260:	08 95       	ret

00001262 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1262:	0f 93       	push	r16
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    1264:	fc 01       	movw	r30, r24
    1266:	e2 5a       	subi	r30, 0xA2	; 162
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	30 81       	ld	r19, Z
    126c:	33 23       	and	r19, r19
    126e:	09 f4       	brne	.+2      	; 0x1272 <u8g2_DrawHVLine+0x10>
    1270:	65 c0       	rjmp	.+202    	; 0x133c <u8g2_DrawHVLine+0xda>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    1272:	22 23       	and	r18, r18
    1274:	09 f4       	brne	.+2      	; 0x1278 <u8g2_DrawHVLine+0x16>
    1276:	62 c0       	rjmp	.+196    	; 0x133c <u8g2_DrawHVLine+0xda>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	58 f0       	brcs	.+22     	; 0x1292 <u8g2_DrawHVLine+0x30>
      {
	if ( dir == 2 )
    127c:	02 30       	cpi	r16, 0x02	; 2
    127e:	19 f4       	brne	.+6      	; 0x1286 <u8g2_DrawHVLine+0x24>
    1280:	6f 5f       	subi	r22, 0xFF	; 255
	{
	  x -= len;
	  x++;
    1282:	62 1b       	sub	r22, r18
    1284:	0a c0       	rjmp	.+20     	; 0x129a <u8g2_DrawHVLine+0x38>
	}
	else if ( dir == 3 )
    1286:	03 30       	cpi	r16, 0x03	; 3
    1288:	21 f4       	brne	.+8      	; 0x1292 <u8g2_DrawHVLine+0x30>
    128a:	4f 5f       	subi	r20, 0xFF	; 255
	{
	  y -= len;
	  y++;
    128c:	42 1b       	sub	r20, r18
	}
      }
      dir &= 1;  
    128e:	51 e0       	ldi	r21, 0x01	; 1
    1290:	2d c0       	rjmp	.+90     	; 0x12ec <u8g2_DrawHVLine+0x8a>
      
      /* clip against the user window */
      if ( dir == 0 )
    1292:	50 2f       	mov	r21, r16
    1294:	51 70       	andi	r21, 0x01	; 1
    1296:	00 fd       	sbrc	r16, 0
    1298:	29 c0       	rjmp	.+82     	; 0x12ec <u8g2_DrawHVLine+0x8a>
      {
	if ( y < u8g2->user_y0 )
    129a:	dc 01       	movw	r26, r24
    129c:	d0 96       	adiw	r26, 0x30	; 48
    129e:	3c 91       	ld	r19, X
    12a0:	d0 97       	sbiw	r26, 0x30	; 48
    12a2:	43 17       	cp	r20, r19
    12a4:	08 f4       	brcc	.+2      	; 0x12a8 <u8g2_DrawHVLine+0x46>
    12a6:	4a c0       	rjmp	.+148    	; 0x133c <u8g2_DrawHVLine+0xda>
	  return;
	if ( y >= u8g2->user_y1 )
    12a8:	d1 96       	adiw	r26, 0x31	; 49
    12aa:	3c 91       	ld	r19, X
    12ac:	d1 97       	sbiw	r26, 0x31	; 49
    12ae:	43 17       	cp	r20, r19
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <u8g2_DrawHVLine+0x52>
    12b2:	44 c0       	rjmp	.+136    	; 0x133c <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    12b4:	9f 96       	adiw	r26, 0x2f	; 47
    12b6:	3c 91       	ld	r19, X
    12b8:	9f 97       	sbiw	r26, 0x2f	; 47
    12ba:	9e 96       	adiw	r26, 0x2e	; 46
    12bc:	5c 91       	ld	r21, X
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    12be:	26 0f       	add	r18, r22
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    12c0:	26 17       	cp	r18, r22
    12c2:	30 f4       	brcc	.+12     	; 0x12d0 <u8g2_DrawHVLine+0x6e>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    12c4:	63 17       	cp	r22, r19
    12c6:	18 f4       	brcc	.+6      	; 0x12ce <u8g2_DrawHVLine+0x6c>
    {
      b = d;
      b--;
    12c8:	2f ef       	ldi	r18, 0xFF	; 255
    12ca:	23 0f       	add	r18, r19
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <u8g2_DrawHVLine+0x72>
    }
    else
    {
      a = c;
    12ce:	65 2f       	mov	r22, r21
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    12d0:	63 17       	cp	r22, r19
    12d2:	a0 f5       	brcc	.+104    	; 0x133c <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
    12d4:	52 17       	cp	r21, r18
    12d6:	90 f5       	brcc	.+100    	; 0x133c <u8g2_DrawHVLine+0xda>
    12d8:	65 17       	cp	r22, r21
    12da:	08 f4       	brcc	.+2      	; 0x12de <u8g2_DrawHVLine+0x7c>
    12dc:	65 2f       	mov	r22, r21
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    12de:	23 17       	cp	r18, r19
    12e0:	08 f4       	brcc	.+2      	; 0x12e4 <u8g2_DrawHVLine+0x82>
    12e2:	32 2f       	mov	r19, r18
    12e4:	23 2f       	mov	r18, r19
    12e6:	26 1b       	sub	r18, r22
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	1e c0       	rjmp	.+60     	; 0x1328 <u8g2_DrawHVLine+0xc6>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    12ec:	fc 01       	movw	r30, r24
    12ee:	36 a5       	ldd	r19, Z+46	; 0x2e
    12f0:	63 17       	cp	r22, r19
    12f2:	20 f1       	brcs	.+72     	; 0x133c <u8g2_DrawHVLine+0xda>
	  return;
	if ( x >= u8g2->user_x1 )
    12f4:	37 a5       	ldd	r19, Z+47	; 0x2f
    12f6:	63 17       	cp	r22, r19
    12f8:	08 f5       	brcc	.+66     	; 0x133c <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    12fa:	31 a9       	ldd	r19, Z+49	; 0x31
    12fc:	70 a9       	ldd	r23, Z+48	; 0x30
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    12fe:	24 0f       	add	r18, r20
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    1300:	24 17       	cp	r18, r20
    1302:	30 f4       	brcc	.+12     	; 0x1310 <u8g2_DrawHVLine+0xae>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    1304:	43 17       	cp	r20, r19
    1306:	18 f4       	brcc	.+6      	; 0x130e <u8g2_DrawHVLine+0xac>
    {
      b = d;
      b--;
    1308:	2f ef       	ldi	r18, 0xFF	; 255
    130a:	23 0f       	add	r18, r19
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <u8g2_DrawHVLine+0xb2>
    }
    else
    {
      a = c;
    130e:	47 2f       	mov	r20, r23
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    1310:	43 17       	cp	r20, r19
    1312:	a0 f4       	brcc	.+40     	; 0x133c <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
    1314:	72 17       	cp	r23, r18
    1316:	90 f4       	brcc	.+36     	; 0x133c <u8g2_DrawHVLine+0xda>
    1318:	47 17       	cp	r20, r23
    131a:	08 f4       	brcc	.+2      	; 0x131e <u8g2_DrawHVLine+0xbc>
    131c:	47 2f       	mov	r20, r23
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    131e:	23 17       	cp	r18, r19
    1320:	08 f4       	brcc	.+2      	; 0x1324 <u8g2_DrawHVLine+0xc2>
    1322:	32 2f       	mov	r19, r18
    1324:	23 2f       	mov	r18, r19
    1326:	24 1b       	sub	r18, r20
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    1328:	dc 01       	movw	r26, r24
    132a:	91 96       	adiw	r26, 0x21	; 33
    132c:	ed 91       	ld	r30, X+
    132e:	fc 91       	ld	r31, X
    1330:	92 97       	sbiw	r26, 0x22	; 34
    1332:	04 80       	ldd	r0, Z+4	; 0x04
    1334:	f5 81       	ldd	r31, Z+5	; 0x05
    1336:	e0 2d       	mov	r30, r0
    1338:	05 2f       	mov	r16, r21
    133a:	09 95       	icall
    }
}
    133c:	0f 91       	pop	r16
    133e:	08 95       	ret

00001340 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    1340:	46 17       	cp	r20, r22
    1342:	38 f4       	brcc	.+14     	; 0x1352 <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
    1344:	82 17       	cp	r24, r18
    1346:	60 f0       	brcs	.+24     	; 0x1360 <u8g2_is_intersection_decision_tree+0x20>
    {
      return 1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	24 17       	cp	r18, r20
    134c:	60 f0       	brcs	.+24     	; 0x1366 <u8g2_is_intersection_decision_tree+0x26>
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    1352:	82 17       	cp	r24, r18
    1354:	38 f4       	brcc	.+14     	; 0x1364 <u8g2_is_intersection_decision_tree+0x24>
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	24 17       	cp	r18, r20
    135a:	28 f0       	brcs	.+10     	; 0x1366 <u8g2_is_intersection_decision_tree+0x26>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	08 95       	ret
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    1364:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
    1366:	08 95       	ret

00001368 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	ec 01       	movw	r28, r24
    1374:	16 2f       	mov	r17, r22
    1376:	f2 2e       	mov	r15, r18
    1378:	20 2f       	mov	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    137a:	69 a9       	ldd	r22, Y+49	; 0x31
    137c:	88 a9       	ldd	r24, Y+48	; 0x30
    137e:	0e 94 a0 09 	call	0x1340	; 0x1340 <u8g2_is_intersection_decision_tree>
    1382:	88 23       	and	r24, r24
    1384:	31 f0       	breq	.+12     	; 0x1392 <u8g2_IsIntersection+0x2a>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    1386:	2f 2d       	mov	r18, r15
    1388:	41 2f       	mov	r20, r17
    138a:	6f a5       	ldd	r22, Y+47	; 0x2f
    138c:	8e a5       	ldd	r24, Y+46	; 0x2e
    138e:	0e 94 a0 09 	call	0x1340	; 0x1340 <u8g2_is_intersection_decision_tree>
}
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	08 95       	ret

0000139e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	7c 01       	movw	r14, r24
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    13aa:	34 2f       	mov	r19, r20
    13ac:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	03 2e       	mov	r0, r19
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    13be:	c8 2f       	mov	r28, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    13c0:	f7 01       	movw	r30, r14
    13c2:	ec 59       	subi	r30, 0x9C	; 156
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	50 81       	ld	r21, Z
    13c8:	52 30       	cpi	r21, 0x02	; 2
    13ca:	20 f4       	brcc	.+8      	; 0x13d4 <u8g2_ll_hvline_vertical_top_lsb+0x36>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    13cc:	51 30       	cpi	r21, 0x01	; 1
    13ce:	21 f0       	breq	.+8      	; 0x13d8 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    13d0:	78 2f       	mov	r23, r24
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    13d8:	78 2f       	mov	r23, r24
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    13da:	c0 e0       	ldi	r28, 0x00	; 0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    13dc:	50 e0       	ldi	r21, 0x00	; 0
  offset &= ~7;
    13de:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    13e0:	d7 01       	movw	r26, r14
    13e2:	93 96       	adiw	r26, 0x23	; 35
    13e4:	8d 91       	ld	r24, X+
    13e6:	9c 91       	ld	r25, X
    13e8:	94 97       	sbiw	r26, 0x24	; 36
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    13ea:	ed 91       	ld	r30, X+
    13ec:	fc 91       	ld	r31, X
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    13ee:	d0 89       	ldd	r29, Z+16	; 0x10
    13f0:	d4 9f       	mul	r29, r20
    13f2:	f0 01       	movw	r30, r0
    13f4:	d5 9f       	mul	r29, r21
    13f6:	f0 0d       	add	r31, r0
    13f8:	11 24       	eor	r1, r1
    13fa:	e6 0f       	add	r30, r22
    13fc:	f1 1d       	adc	r31, r1
    13fe:	e8 0f       	add	r30, r24
    1400:	f9 1f       	adc	r31, r25
  
  if ( dir == 0 )
    1402:	01 11       	cpse	r16, r1
    1404:	07 c0       	rjmp	.+14     	; 0x1414 <u8g2_ll_hvline_vertical_top_lsb+0x76>
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    1406:	80 81       	ld	r24, Z
    1408:	87 2b       	or	r24, r23
    140a:	8c 27       	eor	r24, r28
    140c:	81 93       	st	Z+, r24
	ptr++;
	len--;
    140e:	21 50       	subi	r18, 0x01	; 1
      } while( len != 0 );
    1410:	d1 f7       	brne	.-12     	; 0x1406 <u8g2_ll_hvline_vertical_top_lsb+0x68>
    1412:	22 c0       	rjmp	.+68     	; 0x1458 <u8g2_ll_hvline_vertical_top_lsb+0xba>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    1414:	a7 01       	movw	r20, r14
    1416:	4c 59       	subi	r20, 0x9C	; 156
    1418:	5f 4f       	sbci	r21, 0xFF	; 255
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    141a:	90 81       	ld	r25, Z
    141c:	97 2b       	or	r25, r23
    141e:	9c 27       	eor	r25, r28
    1420:	90 83       	st	Z, r25
      
      bit_pos++;
    1422:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    1424:	37 70       	andi	r19, 0x07	; 7

      len--;
    1426:	21 50       	subi	r18, 0x01	; 1

      if ( bit_pos == 0 )
    1428:	31 11       	cpse	r19, r1
    142a:	0e c0       	rjmp	.+28     	; 0x1448 <u8g2_ll_hvline_vertical_top_lsb+0xaa>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    142c:	d7 01       	movw	r26, r14
    142e:	97 96       	adiw	r26, 0x27	; 39
    1430:	8c 91       	ld	r24, X
    1432:	e8 0f       	add	r30, r24
    1434:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    1436:	da 01       	movw	r26, r20
    1438:	8c 91       	ld	r24, X
    143a:	82 30       	cpi	r24, 0x02	; 2
    143c:	40 f4       	brcc	.+16     	; 0x144e <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	41 f0       	breq	.+16     	; 0x1452 <u8g2_ll_hvline_vertical_top_lsb+0xb4>
	  xor_mask = 1;
    1442:	c1 e0       	ldi	r28, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    1444:	71 e0       	ldi	r23, 0x01	; 1
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    1448:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    144a:	cc 0f       	add	r28, r28
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    144e:	c1 e0       	ldi	r28, 0x01	; 1
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    1452:	71 e0       	ldi	r23, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    1454:	21 11       	cpse	r18, r1
    1456:	e1 cf       	rjmp	.-62     	; 0x141a <u8g2_ll_hvline_vertical_top_lsb+0x7c>
  }
}
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	08 95       	ret

00001464 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    1464:	fc 01       	movw	r30, r24
    1466:	a0 81       	ld	r26, Z
    1468:	b1 81       	ldd	r27, Z+1	; 0x01
    146a:	85 a1       	ldd	r24, Z+37	; 0x25
    146c:	98 2f       	mov	r25, r24
    146e:	99 0f       	add	r25, r25
    1470:	99 0f       	add	r25, r25
    1472:	99 0f       	add	r25, r25
    1474:	90 a7       	std	Z+40, r25	; 0x28
    1476:	50 96       	adiw	r26, 0x10	; 16
    1478:	9c 91       	ld	r25, X
    147a:	50 97       	sbiw	r26, 0x10	; 16
    147c:	90 32       	cpi	r25, 0x20	; 32
    147e:	08 f0       	brcs	.+2      	; 0x1482 <u8g2_update_dimension_common+0x1e>
    1480:	9f e1       	ldi	r25, 0x1F	; 31
    1482:	99 0f       	add	r25, r25
    1484:	99 0f       	add	r25, r25
    1486:	99 0f       	add	r25, r25
    1488:	97 a3       	std	Z+39, r25	; 0x27
    148a:	46 a1       	ldd	r20, Z+38	; 0x26
    148c:	94 2f       	mov	r25, r20
    148e:	99 0f       	add	r25, r25
    1490:	99 0f       	add	r25, r25
    1492:	99 0f       	add	r25, r25
    1494:	91 a7       	std	Z+41, r25	; 0x29
    1496:	51 96       	adiw	r26, 0x11	; 17
    1498:	5c 91       	ld	r21, X
    149a:	51 97       	sbiw	r26, 0x11	; 17
    149c:	24 2f       	mov	r18, r20
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	28 0f       	add	r18, r24
    14a2:	31 1d       	adc	r19, r1
    14a4:	65 2f       	mov	r22, r21
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	62 17       	cp	r22, r18
    14aa:	73 07       	cpc	r23, r19
    14ac:	14 f4       	brge	.+4      	; 0x14b2 <u8g2_update_dimension_common+0x4e>
    14ae:	85 2f       	mov	r24, r21
    14b0:	84 1b       	sub	r24, r20
    14b2:	92 a7       	std	Z+42, r25	; 0x2a
    14b4:	88 0f       	add	r24, r24
    14b6:	88 0f       	add	r24, r24
    14b8:	88 0f       	add	r24, r24
    14ba:	89 0f       	add	r24, r25
    14bc:	83 a7       	std	Z+43, r24	; 0x2b
    14be:	80 ef       	ldi	r24, 0xF0	; 240
    14c0:	84 a7       	std	Z+44, r24	; 0x2c
    14c2:	54 96       	adiw	r26, 0x14	; 20
    14c4:	8d 91       	ld	r24, X+
    14c6:	9c 91       	ld	r25, X
    14c8:	55 97       	sbiw	r26, 0x15	; 21
    14ca:	81 3f       	cpi	r24, 0xF1	; 241
    14cc:	91 05       	cpc	r25, r1
    14ce:	08 f4       	brcc	.+2      	; 0x14d2 <u8g2_update_dimension_common+0x6e>
    14d0:	84 a7       	std	Z+44, r24	; 0x2c
    14d2:	56 96       	adiw	r26, 0x16	; 22
    14d4:	8c 91       	ld	r24, X
    14d6:	85 a7       	std	Z+45, r24	; 0x2d
    14d8:	08 95       	ret

000014da <u8g2_update_dimension_r0>:
    14da:	0e 94 32 0a 	call	0x1464	; 0x1464 <u8g2_update_dimension_common>
    14de:	08 95       	ret

000014e0 <u8g2_apply_clip_window>:
    14e0:	0f 93       	push	r16
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	ec 01       	movw	r28, r24
    14e8:	0d a9       	ldd	r16, Y+53	; 0x35
    14ea:	2b a9       	ldd	r18, Y+51	; 0x33
    14ec:	4c a9       	ldd	r20, Y+52	; 0x34
    14ee:	6a a9       	ldd	r22, Y+50	; 0x32
    14f0:	0e 94 b4 09 	call	0x1368	; 0x1368 <u8g2_IsIntersection>
    14f4:	81 11       	cpse	r24, r1
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <u8g2_apply_clip_window+0x20>
    14f8:	c2 5a       	subi	r28, 0xA2	; 162
    14fa:	df 4f       	sbci	r29, 0xFF	; 255
    14fc:	18 82       	st	Y, r1
    14fe:	19 c0       	rjmp	.+50     	; 0x1532 <u8g2_apply_clip_window+0x52>
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	fe 01       	movw	r30, r28
    1504:	e2 5a       	subi	r30, 0xA2	; 162
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	80 83       	st	Z, r24
    150a:	8a a9       	ldd	r24, Y+50	; 0x32
    150c:	9e a5       	ldd	r25, Y+46	; 0x2e
    150e:	98 17       	cp	r25, r24
    1510:	08 f4       	brcc	.+2      	; 0x1514 <u8g2_apply_clip_window+0x34>
    1512:	8e a7       	std	Y+46, r24	; 0x2e
    1514:	8b a9       	ldd	r24, Y+51	; 0x33
    1516:	9f a5       	ldd	r25, Y+47	; 0x2f
    1518:	89 17       	cp	r24, r25
    151a:	08 f4       	brcc	.+2      	; 0x151e <u8g2_apply_clip_window+0x3e>
    151c:	8f a7       	std	Y+47, r24	; 0x2f
    151e:	8c a9       	ldd	r24, Y+52	; 0x34
    1520:	98 a9       	ldd	r25, Y+48	; 0x30
    1522:	98 17       	cp	r25, r24
    1524:	08 f4       	brcc	.+2      	; 0x1528 <u8g2_apply_clip_window+0x48>
    1526:	88 ab       	std	Y+48, r24	; 0x30
    1528:	8d a9       	ldd	r24, Y+53	; 0x35
    152a:	99 a9       	ldd	r25, Y+49	; 0x31
    152c:	89 17       	cp	r24, r25
    152e:	08 f4       	brcc	.+2      	; 0x1532 <u8g2_apply_clip_window+0x52>
    1530:	89 ab       	std	Y+49, r24	; 0x31
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	0f 91       	pop	r16
    1538:	08 95       	ret

0000153a <u8g2_update_page_win_r0>:
    153a:	fc 01       	movw	r30, r24
    153c:	16 a6       	std	Z+46, r1	; 0x2e
    153e:	84 a5       	ldd	r24, Z+44	; 0x2c
    1540:	87 a7       	std	Z+47, r24	; 0x2f
    1542:	82 a5       	ldd	r24, Z+42	; 0x2a
    1544:	80 ab       	std	Z+48, r24	; 0x30
    1546:	83 a5       	ldd	r24, Z+43	; 0x2b
    1548:	81 ab       	std	Z+49, r24	; 0x31
    154a:	cf 01       	movw	r24, r30
    154c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <u8g2_apply_clip_window>
    1550:	08 95       	ret

00001552 <u8g2_draw_l90_r0>:
    1552:	0f 93       	push	r16
    1554:	0e 94 24 09 	call	0x1248	; 0x1248 <u8g2_draw_hv_line_2dir>
    1558:	0f 91       	pop	r16
    155a:	08 95       	ret

0000155c <u8g2_SetMaxClipWindow>:
    155c:	dc 01       	movw	r26, r24
    155e:	d2 96       	adiw	r26, 0x32	; 50
    1560:	1c 92       	st	X, r1
    1562:	d2 97       	sbiw	r26, 0x32	; 50
    1564:	d4 96       	adiw	r26, 0x34	; 52
    1566:	1c 92       	st	X, r1
    1568:	d4 97       	sbiw	r26, 0x34	; 52
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	d3 96       	adiw	r26, 0x33	; 51
    156e:	8c 93       	st	X, r24
    1570:	d3 97       	sbiw	r26, 0x33	; 51
    1572:	d5 96       	adiw	r26, 0x35	; 53
    1574:	8c 93       	st	X, r24
    1576:	d5 97       	sbiw	r26, 0x35	; 53
    1578:	91 96       	adiw	r26, 0x21	; 33
    157a:	ed 91       	ld	r30, X+
    157c:	fc 91       	ld	r31, X
    157e:	92 97       	sbiw	r26, 0x22	; 34
    1580:	02 80       	ldd	r0, Z+2	; 0x02
    1582:	f3 81       	ldd	r31, Z+3	; 0x03
    1584:	e0 2d       	mov	r30, r0
    1586:	cd 01       	movw	r24, r26
    1588:	09 95       	icall
    158a:	08 95       	ret

0000158c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    1596:	1f aa       	std	Y+55, r1	; 0x37
    1598:	1e aa       	std	Y+54, r1	; 0x36
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    159a:	38 a3       	std	Y+32, r19	; 0x20
    159c:	2f 8f       	std	Y+31, r18	; 0x1f
  
  u8g2->tile_buf_ptr = buf;
    159e:	7c a3       	std	Y+36, r23	; 0x24
    15a0:	6b a3       	std	Y+35, r22	; 0x23
  u8g2->tile_buf_height = tile_buf_height;
    15a2:	4d a3       	std	Y+37, r20	; 0x25
  
  u8g2->tile_curr_row = 0;
    15a4:	1e a2       	std	Y+38, r1	; 0x26
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    15a6:	fc 01       	movw	r30, r24
    15a8:	ed 5b       	subi	r30, 0xBD	; 189
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    15ae:	b0 96       	adiw	r30, 0x20	; 32
    15b0:	10 82       	st	Z, r1
  
  u8g2->draw_color = 1;
    15b2:	31 96       	adiw	r30, 0x01	; 1
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    15b8:	31 96       	adiw	r30, 0x01	; 1
    15ba:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    15bc:	1a a3       	std	Y+34, r17	; 0x22
    15be:	09 a3       	std	Y+33, r16	; 0x21
  u8g2->cb->update_dimension(u8g2);
    15c0:	d8 01       	movw	r26, r16
    15c2:	ed 91       	ld	r30, X+
    15c4:	fc 91       	ld	r31, X
    15c6:	ce 01       	movw	r24, r28
    15c8:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    15ca:	ce 01       	movw	r24, r28
    15cc:	0e 94 ae 0a 	call	0x155c	; 0x155c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    15d0:	ce 01       	movw	r24, r28
    15d2:	0e 94 09 09 	call	0x1212	; 0x1212 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    15d6:	ca 5b       	subi	r28, 0xBA	; 186
    15d8:	df 4f       	sbci	r29, 0xFF	; 255
    15da:	18 82       	st	Y, r1
#endif
}
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	08 95       	ret

000015e6 <u8x8_ascii_next>:
      x++;
      cnt++;
    }
  }
  return cnt;
}
    15e6:	66 23       	and	r22, r22
    15e8:	29 f0       	breq	.+10     	; 0x15f4 <u8x8_ascii_next+0xe>
    15ea:	6a 30       	cpi	r22, 0x0A	; 10
    15ec:	31 f0       	breq	.+12     	; 0x15fa <u8x8_ascii_next+0x14>
    15ee:	86 2f       	mov	r24, r22
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	08 95       	ret
    15f4:	8f ef       	ldi	r24, 0xFF	; 255
    15f6:	9f ef       	ldi	r25, 0xFF	; 255
    15f8:	08 95       	ret
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	9f ef       	ldi	r25, 0xFF	; 255
    15fe:	08 95       	ret

00001600 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    1600:	fc 01       	movw	r30, r24
    1602:	11 8e       	std	Z+25, r1	; 0x19
    1604:	08 95       	ret

00001606 <u8x8_byte_SetDC>:
    case U8X8_MSG_BYTE_START_TRANSFER:
    case U8X8_MSG_BYTE_END_TRANSFER:
      break;	/* do nothing */
  }
  return 1;	/* always succeed */
}
    1606:	46 2f       	mov	r20, r22
    1608:	dc 01       	movw	r26, r24
    160a:	18 96       	adiw	r26, 0x08	; 8
    160c:	ed 91       	ld	r30, X+
    160e:	fc 91       	ld	r31, X
    1610:	19 97       	sbiw	r26, 0x09	; 9
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	60 e2       	ldi	r22, 0x20	; 32
    1618:	09 95       	icall
    161a:	08 95       	ret

0000161c <u8x8_byte_SendBytes>:
    161c:	9a 01       	movw	r18, r20
    161e:	dc 01       	movw	r26, r24
    1620:	18 96       	adiw	r26, 0x08	; 8
    1622:	ed 91       	ld	r30, X+
    1624:	fc 91       	ld	r31, X
    1626:	19 97       	sbiw	r26, 0x09	; 9
    1628:	46 2f       	mov	r20, r22
    162a:	67 e1       	ldi	r22, 0x17	; 23
    162c:	09 95       	icall
    162e:	08 95       	ret

00001630 <u8x8_byte_SendByte>:
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	1f 92       	push	r1
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	69 83       	std	Y+1, r22	; 0x01
    163c:	ae 01       	movw	r20, r28
    163e:	4f 5f       	subi	r20, 0xFF	; 255
    1640:	5f 4f       	sbci	r21, 0xFF	; 255
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	0e 94 0e 0b 	call	0x161c	; 0x161c <u8x8_byte_SendBytes>
    1648:	0f 90       	pop	r0
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <u8x8_byte_4wire_sw_spi>:
    U8X8_MSG_BYTE_START_TRANSFER
    U8X8_MSG_BYTE_END_TRANSFER
*/

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1650:	9f 92       	push	r9
    1652:	af 92       	push	r10
    1654:	bf 92       	push	r11
    1656:	cf 92       	push	r12
    1658:	df 92       	push	r13
    165a:	ef 92       	push	r14
    165c:	ff 92       	push	r15
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	ec 01       	movw	r28, r24
    1668:	79 01       	movw	r14, r18
  uint8_t i, b;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
    166a:	a8 81       	ld	r26, Y
    166c:	b9 81       	ldd	r27, Y+1	; 0x01
  uint8_t not_takeover_edge = 1 - takeover_edge;
 
  switch(msg)
    166e:	68 31       	cpi	r22, 0x18	; 24
    1670:	09 f4       	brne	.+2      	; 0x1674 <u8x8_byte_4wire_sw_spi+0x24>
    1672:	67 c0       	rjmp	.+206    	; 0x1742 <u8x8_byte_4wire_sw_spi+0xf2>
    1674:	30 f4       	brcc	.+12     	; 0x1682 <u8x8_byte_4wire_sw_spi+0x32>
    1676:	64 31       	cpi	r22, 0x14	; 20
    1678:	09 f4       	brne	.+2      	; 0x167c <u8x8_byte_4wire_sw_spi+0x2c>
    167a:	4f c0       	rjmp	.+158    	; 0x171a <u8x8_byte_4wire_sw_spi+0xca>
    167c:	67 31       	cpi	r22, 0x17	; 23
    167e:	c9 f1       	breq	.+114    	; 0x16f2 <u8x8_byte_4wire_sw_spi+0xa2>
    1680:	82 c0       	rjmp	.+260    	; 0x1786 <u8x8_byte_4wire_sw_spi+0x136>
    1682:	69 31       	cpi	r22, 0x19	; 25
    1684:	09 f4       	brne	.+2      	; 0x1688 <u8x8_byte_4wire_sw_spi+0x38>
    1686:	6e c0       	rjmp	.+220    	; 0x1764 <u8x8_byte_4wire_sw_spi+0x114>
    1688:	60 32       	cpi	r22, 0x20	; 32
    168a:	09 f4       	brne	.+2      	; 0x168e <u8x8_byte_4wire_sw_spi+0x3e>
    168c:	55 c0       	rjmp	.+170    	; 0x1738 <u8x8_byte_4wire_sw_spi+0xe8>
    168e:	7b c0       	rjmp	.+246    	; 0x1786 <u8x8_byte_4wire_sw_spi+0x136>
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
    1690:	f7 01       	movw	r30, r14
    1692:	01 91       	ld	r16, Z+
    1694:	7f 01       	movw	r14, r30
	data++;
    1696:	18 e0       	ldi	r17, 0x08	; 8
	arg_int--;
	for( i = 0; i < 8; i++ )
	{
	  if ( b & 128 )
    1698:	00 23       	and	r16, r16
    169a:	34 f4       	brge	.+12     	; 0x16a8 <u8x8_byte_4wire_sw_spi+0x58>
	    u8x8_gpio_SetSPIData(u8x8, 1);
    169c:	49 2d       	mov	r20, r9
    169e:	61 e4       	ldi	r22, 0x41	; 65
    16a0:	ce 01       	movw	r24, r28
    16a2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
    16a6:	05 c0       	rjmp	.+10     	; 0x16b2 <u8x8_byte_4wire_sw_spi+0x62>
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	61 e4       	ldi	r22, 0x41	; 65
    16ac:	ce 01       	movw	r24, r28
    16ae:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
	  b <<= 1;
    16b2:	00 0f       	add	r16, r16
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
    16b4:	4a 2d       	mov	r20, r10
    16b6:	60 e4       	ldi	r22, 0x40	; 64
    16b8:	ce 01       	movw	r24, r28
    16ba:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
    16be:	e8 81       	ld	r30, Y
    16c0:	f9 81       	ldd	r31, Y+1	; 0x01
    16c2:	46 81       	ldd	r20, Z+6	; 0x06
    16c4:	6c e2       	ldi	r22, 0x2C	; 44
    16c6:	ce 01       	movw	r24, r28
    16c8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
	  u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
    16cc:	4b 2d       	mov	r20, r11
    16ce:	60 e4       	ldi	r22, 0x40	; 64
    16d0:	ce 01       	movw	r24, r28
    16d2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
    16d6:	e8 81       	ld	r30, Y
    16d8:	f9 81       	ldd	r31, Y+1	; 0x01
    16da:	47 81       	ldd	r20, Z+7	; 0x07
    16dc:	6c e2       	ldi	r22, 0x2C	; 44
    16de:	ce 01       	movw	r24, r28
    16e0:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
    16e4:	11 50       	subi	r17, 0x01	; 1
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = 0; i < 8; i++ )
    16e6:	c1 f6       	brne	.-80     	; 0x1698 <u8x8_byte_4wire_sw_spi+0x48>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
    16e8:	ce 14       	cp	r12, r14
    16ea:	df 04       	cpc	r13, r15
    16ec:	89 f6       	brne	.-94     	; 0x1690 <u8x8_byte_4wire_sw_spi+0x40>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	4d c0       	rjmp	.+154    	; 0x178c <u8x8_byte_4wire_sw_spi+0x13c>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
    16f2:	44 23       	and	r20, r20
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <u8x8_byte_4wire_sw_spi+0xa8>
    16f6:	49 c0       	rjmp	.+146    	; 0x178a <u8x8_byte_4wire_sw_spi+0x13a>

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t i, b;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
    16f8:	1c 96       	adiw	r26, 0x0c	; 12
    16fa:	8c 91       	ld	r24, X
    16fc:	81 70       	andi	r24, 0x01	; 1
    16fe:	b8 2e       	mov	r11, r24
    1700:	41 50       	subi	r20, 0x01	; 1
    1702:	c4 2e       	mov	r12, r20
    1704:	d1 2c       	mov	r13, r1
    1706:	ff ef       	ldi	r31, 0xFF	; 255
    1708:	cf 1a       	sub	r12, r31
    170a:	df 0a       	sbc	r13, r31
    170c:	c2 0e       	add	r12, r18
    170e:	d3 1e       	adc	r13, r19
	data++;
	arg_int--;
	for( i = 0; i < 8; i++ )
	{
	  if ( b & 128 )
	    u8x8_gpio_SetSPIData(u8x8, 1);
    1710:	99 24       	eor	r9, r9
    1712:	93 94       	inc	r9
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
	  b <<= 1;
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
    1714:	a9 2c       	mov	r10, r9
    1716:	a8 1a       	sub	r10, r24
    1718:	bb cf       	rjmp	.-138    	; 0x1690 <u8x8_byte_4wire_sw_spi+0x40>
      }
      break;
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
    171a:	11 96       	adiw	r26, 0x01	; 1
    171c:	4c 91       	ld	r20, X
    171e:	69 e4       	ldi	r22, 0x49	; 73
    1720:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
    1724:	e8 81       	ld	r30, Y
    1726:	f9 81       	ldd	r31, Y+1	; 0x01
    1728:	44 85       	ldd	r20, Z+12	; 0x0c
    172a:	41 70       	andi	r20, 0x01	; 1
    172c:	60 e4       	ldi	r22, 0x40	; 64
    172e:	ce 01       	movw	r24, r28
    1730:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
      break;
    1736:	2a c0       	rjmp	.+84     	; 0x178c <u8x8_byte_4wire_sw_spi+0x13c>
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
    1738:	6a e4       	ldi	r22, 0x4A	; 74
    173a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    1740:	25 c0       	rjmp	.+74     	; 0x178c <u8x8_byte_4wire_sw_spi+0x13c>
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
    1742:	4c 91       	ld	r20, X
    1744:	69 e4       	ldi	r22, 0x49	; 73
    1746:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
    174a:	a8 81       	ld	r26, Y
    174c:	b9 81       	ldd	r27, Y+1	; 0x01
    174e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1750:	fb 85       	ldd	r31, Y+11	; 0x0b
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	12 96       	adiw	r26, 0x02	; 2
    1758:	4c 91       	ld	r20, X
    175a:	6c e2       	ldi	r22, 0x2C	; 44
    175c:	ce 01       	movw	r24, r28
    175e:	09 95       	icall
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    1762:	14 c0       	rjmp	.+40     	; 0x178c <u8x8_byte_4wire_sw_spi+0x13c>
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
    1764:	ea 85       	ldd	r30, Y+10	; 0x0a
    1766:	fb 85       	ldd	r31, Y+11	; 0x0b
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	13 96       	adiw	r26, 0x03	; 3
    176e:	4c 91       	ld	r20, X
    1770:	6c e2       	ldi	r22, 0x2C	; 44
    1772:	09 95       	icall
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
    1774:	e8 81       	ld	r30, Y
    1776:	f9 81       	ldd	r31, Y+1	; 0x01
    1778:	41 81       	ldd	r20, Z+1	; 0x01
    177a:	69 e4       	ldi	r22, 0x49	; 73
    177c:	ce 01       	movw	r24, r28
    177e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
      break;
    default:
      return 0;
  }
  return 1;
    1782:	81 e0       	ldi	r24, 0x01	; 1
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    1784:	03 c0       	rjmp	.+6      	; 0x178c <u8x8_byte_4wire_sw_spi+0x13c>
    default:
      return 0;
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	01 c0       	rjmp	.+2      	; 0x178c <u8x8_byte_4wire_sw_spi+0x13c>
  }
  return 1;
    178a:	81 e0       	ldi	r24, 0x01	; 1
}
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	bf 90       	pop	r11
    179e:	af 90       	pop	r10
    17a0:	9f 90       	pop	r9
    17a2:	08 95       	ret

000017a4 <u8x8_cad_SendCmd>:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
}
    17a4:	46 2f       	mov	r20, r22
    17a6:	dc 01       	movw	r26, r24
    17a8:	16 96       	adiw	r26, 0x06	; 6
    17aa:	ed 91       	ld	r30, X+
    17ac:	fc 91       	ld	r31, X
    17ae:	17 97       	sbiw	r26, 0x07	; 7
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	65 e1       	ldi	r22, 0x15	; 21
    17b6:	09 95       	icall
    17b8:	08 95       	ret

000017ba <u8x8_cad_SendArg>:
    17ba:	46 2f       	mov	r20, r22
    17bc:	dc 01       	movw	r26, r24
    17be:	16 96       	adiw	r26, 0x06	; 6
    17c0:	ed 91       	ld	r30, X+
    17c2:	fc 91       	ld	r31, X
    17c4:	17 97       	sbiw	r26, 0x07	; 7
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	66 e1       	ldi	r22, 0x16	; 22
    17cc:	09 95       	icall
    17ce:	08 95       	ret

000017d0 <u8x8_cad_SendData>:
    17d0:	9a 01       	movw	r18, r20
    17d2:	dc 01       	movw	r26, r24
    17d4:	16 96       	adiw	r26, 0x06	; 6
    17d6:	ed 91       	ld	r30, X+
    17d8:	fc 91       	ld	r31, X
    17da:	17 97       	sbiw	r26, 0x07	; 7
    17dc:	46 2f       	mov	r20, r22
    17de:	67 e1       	ldi	r22, 0x17	; 23
    17e0:	09 95       	icall
    17e2:	08 95       	ret

000017e4 <u8x8_cad_StartTransfer>:
    17e4:	dc 01       	movw	r26, r24
    17e6:	16 96       	adiw	r26, 0x06	; 6
    17e8:	ed 91       	ld	r30, X+
    17ea:	fc 91       	ld	r31, X
    17ec:	17 97       	sbiw	r26, 0x07	; 7
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e0       	ldi	r20, 0x00	; 0
    17f4:	68 e1       	ldi	r22, 0x18	; 24
    17f6:	09 95       	icall
    17f8:	08 95       	ret

000017fa <u8x8_cad_EndTransfer>:
    17fa:	dc 01       	movw	r26, r24
    17fc:	16 96       	adiw	r26, 0x06	; 6
    17fe:	ed 91       	ld	r30, X+
    1800:	fc 91       	ld	r31, X
    1802:	17 97       	sbiw	r26, 0x07	; 7
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	69 e1       	ldi	r22, 0x19	; 25
    180c:	09 95       	icall
    180e:	08 95       	ret

00001810 <u8x8_cad_SendSequence>:
    1810:	ef 92       	push	r14
    1812:	ff 92       	push	r15
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	1f 92       	push	r1
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	7c 01       	movw	r14, r24
    1824:	8b 01       	movw	r16, r22
    1826:	d8 01       	movw	r26, r16
    1828:	6c 91       	ld	r22, X
    182a:	67 31       	cpi	r22, 0x17	; 23
    182c:	c1 f0       	breq	.+48     	; 0x185e <u8x8_cad_SendSequence+0x4e>
    182e:	18 f4       	brcc	.+6      	; 0x1836 <u8x8_cad_SendSequence+0x26>
    1830:	65 31       	cpi	r22, 0x15	; 21
    1832:	30 f4       	brcc	.+12     	; 0x1840 <u8x8_cad_SendSequence+0x30>
    1834:	38 c0       	rjmp	.+112    	; 0x18a6 <u8x8_cad_SendSequence+0x96>
    1836:	6a 31       	cpi	r22, 0x1A	; 26
    1838:	f8 f0       	brcs	.+62     	; 0x1878 <u8x8_cad_SendSequence+0x68>
    183a:	6e 3f       	cpi	r22, 0xFE	; 254
    183c:	51 f1       	breq	.+84     	; 0x1892 <u8x8_cad_SendSequence+0x82>
    183e:	33 c0       	rjmp	.+102    	; 0x18a6 <u8x8_cad_SendSequence+0x96>
    1840:	f8 01       	movw	r30, r16
    1842:	41 81       	ldd	r20, Z+1	; 0x01
    1844:	49 83       	std	Y+1, r20	; 0x01
    1846:	d7 01       	movw	r26, r14
    1848:	16 96       	adiw	r26, 0x06	; 6
    184a:	ed 91       	ld	r30, X+
    184c:	fc 91       	ld	r31, X
    184e:	17 97       	sbiw	r26, 0x07	; 7
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	c7 01       	movw	r24, r14
    1856:	09 95       	icall
    1858:	0e 5f       	subi	r16, 0xFE	; 254
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	e4 cf       	rjmp	.-56     	; 0x1826 <u8x8_cad_SendSequence+0x16>
    185e:	f8 01       	movw	r30, r16
    1860:	81 81       	ldd	r24, Z+1	; 0x01
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	ae 01       	movw	r20, r28
    1866:	4f 5f       	subi	r20, 0xFF	; 255
    1868:	5f 4f       	sbci	r21, 0xFF	; 255
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	c7 01       	movw	r24, r14
    186e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <u8x8_cad_SendData>
    1872:	0e 5f       	subi	r16, 0xFE	; 254
    1874:	1f 4f       	sbci	r17, 0xFF	; 255
    1876:	d7 cf       	rjmp	.-82     	; 0x1826 <u8x8_cad_SendSequence+0x16>
    1878:	0f 5f       	subi	r16, 0xFF	; 255
    187a:	1f 4f       	sbci	r17, 0xFF	; 255
    187c:	d7 01       	movw	r26, r14
    187e:	16 96       	adiw	r26, 0x06	; 6
    1880:	ed 91       	ld	r30, X+
    1882:	fc 91       	ld	r31, X
    1884:	17 97       	sbiw	r26, 0x07	; 7
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	c7 01       	movw	r24, r14
    188e:	09 95       	icall
    1890:	ca cf       	rjmp	.-108    	; 0x1826 <u8x8_cad_SendSequence+0x16>
    1892:	f8 01       	movw	r30, r16
    1894:	41 81       	ldd	r20, Z+1	; 0x01
    1896:	49 83       	std	Y+1, r20	; 0x01
    1898:	69 e2       	ldi	r22, 0x29	; 41
    189a:	c7 01       	movw	r24, r14
    189c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
    18a0:	0e 5f       	subi	r16, 0xFE	; 254
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	c0 cf       	rjmp	.-128    	; 0x1826 <u8x8_cad_SendSequence+0x16>
    18a6:	0f 90       	pop	r0
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	ff 90       	pop	r15
    18b2:	ef 90       	pop	r14
    18b4:	08 95       	ret

000018b6 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	8c 01       	movw	r16, r24
    18c4:	c6 2f       	mov	r28, r22
    18c6:	d4 2f       	mov	r29, r20
    18c8:	79 01       	movw	r14, r18
  switch(msg)
    18ca:	66 31       	cpi	r22, 0x16	; 22
    18cc:	a1 f0       	breq	.+40     	; 0x18f6 <u8x8_cad_001+0x40>
    18ce:	28 f4       	brcc	.+10     	; 0x18da <u8x8_cad_001+0x24>
    18d0:	64 31       	cpi	r22, 0x14	; 20
    18d2:	e9 f0       	breq	.+58     	; 0x190e <u8x8_cad_001+0x58>
    18d4:	65 31       	cpi	r22, 0x15	; 21
    18d6:	31 f0       	breq	.+12     	; 0x18e4 <u8x8_cad_001+0x2e>
    18d8:	25 c0       	rjmp	.+74     	; 0x1924 <u8x8_cad_001+0x6e>
    18da:	67 31       	cpi	r22, 0x17	; 23
    18dc:	a9 f0       	breq	.+42     	; 0x1908 <u8x8_cad_001+0x52>
    18de:	6a 31       	cpi	r22, 0x1A	; 26
    18e0:	08 f5       	brcc	.+66     	; 0x1924 <u8x8_cad_001+0x6e>
    18e2:	15 c0       	rjmp	.+42     	; 0x190e <u8x8_cad_001+0x58>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	0e 94 03 0b 	call	0x1606	; 0x1606 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    18ea:	6d 2f       	mov	r22, r29
    18ec:	c8 01       	movw	r24, r16
    18ee:	0e 94 18 0b 	call	0x1630	; 0x1630 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    18f4:	18 c0       	rjmp	.+48     	; 0x1926 <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	0e 94 03 0b 	call	0x1606	; 0x1606 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    18fc:	6d 2f       	mov	r22, r29
    18fe:	c8 01       	movw	r24, r16
    1900:	0e 94 18 0b 	call	0x1630	; 0x1630 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    1904:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    1906:	0f c0       	rjmp	.+30     	; 0x1926 <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	0e 94 03 0b 	call	0x1606	; 0x1606 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    190e:	d8 01       	movw	r26, r16
    1910:	18 96       	adiw	r26, 0x08	; 8
    1912:	ed 91       	ld	r30, X+
    1914:	fc 91       	ld	r31, X
    1916:	19 97       	sbiw	r26, 0x09	; 9
    1918:	97 01       	movw	r18, r14
    191a:	4d 2f       	mov	r20, r29
    191c:	6c 2f       	mov	r22, r28
    191e:	c8 01       	movw	r24, r16
    1920:	09 95       	icall
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <u8x8_cad_001+0x70>
    default:
      return 0;
    1924:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	08 95       	ret

00001934 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    1934:	fc 01       	movw	r30, r24
    1936:	71 83       	std	Z+1, r23	; 0x01
    1938:	60 83       	st	Z, r22
    193a:	fb 01       	movw	r30, r22
    193c:	22 89       	ldd	r18, Z+18	; 0x12
    193e:	fc 01       	movw	r30, r24
    1940:	24 8b       	std	Z+20, r18	; 0x14
    1942:	08 95       	ret

00001944 <u8x8_d_helper_display_init>:
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	ec 01       	movw	r28, r24
    194a:	ea 85       	ldd	r30, Y+10	; 0x0a
    194c:	fb 85       	ldd	r31, Y+11	; 0x0b
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	68 e2       	ldi	r22, 0x28	; 40
    1956:	09 95       	icall
    1958:	ee 81       	ldd	r30, Y+6	; 0x06
    195a:	ff 81       	ldd	r31, Y+7	; 0x07
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	64 e1       	ldi	r22, 0x14	; 20
    1964:	ce 01       	movw	r24, r28
    1966:	09 95       	icall
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	6b e4       	ldi	r22, 0x4B	; 75
    196c:	ce 01       	movw	r24, r28
    196e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
    1972:	e8 81       	ld	r30, Y
    1974:	f9 81       	ldd	r31, Y+1	; 0x01
    1976:	44 81       	ldd	r20, Z+4	; 0x04
    1978:	69 e2       	ldi	r22, 0x29	; 41
    197a:	ce 01       	movw	r24, r28
    197c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	6b e4       	ldi	r22, 0x4B	; 75
    1984:	ce 01       	movw	r24, r28
    1986:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
    198a:	e8 81       	ld	r30, Y
    198c:	f9 81       	ldd	r31, Y+1	; 0x01
    198e:	44 81       	ldd	r20, Z+4	; 0x04
    1990:	69 e2       	ldi	r22, 0x29	; 41
    1992:	ce 01       	movw	r24, r28
    1994:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
    1998:	41 e0       	ldi	r20, 0x01	; 1
    199a:	6b e4       	ldi	r22, 0x4B	; 75
    199c:	ce 01       	movw	r24, r28
    199e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
    19a2:	e8 81       	ld	r30, Y
    19a4:	f9 81       	ldd	r31, Y+1	; 0x01
    19a6:	45 81       	ldd	r20, Z+5	; 0x05
    19a8:	69 e2       	ldi	r22, 0x29	; 41
    19aa:	ce 01       	movw	r24, r28
    19ac:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <u8x8_gpio_call>
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	08 95       	ret

000019b6 <u8x8_DrawTile>:
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <u8x8_DrawTile+0xa>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <u8x8_DrawTile+0xc>
    19c2:	1f 92       	push	r1
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	6c 83       	std	Y+4, r22	; 0x04
    19ca:	4d 83       	std	Y+5, r20	; 0x05
    19cc:	2b 83       	std	Y+3, r18	; 0x03
    19ce:	1a 83       	std	Y+2, r17	; 0x02
    19d0:	09 83       	std	Y+1, r16	; 0x01
    19d2:	dc 01       	movw	r26, r24
    19d4:	14 96       	adiw	r26, 0x04	; 4
    19d6:	ed 91       	ld	r30, X+
    19d8:	fc 91       	ld	r31, X
    19da:	15 97       	sbiw	r26, 0x05	; 5
    19dc:	9e 01       	movw	r18, r28
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	41 e0       	ldi	r20, 0x01	; 1
    19e4:	6f e0       	ldi	r22, 0x0F	; 15
    19e6:	09 95       	icall
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	08 95       	ret

000019fc <u8x8_SetupMemory>:
    19fc:	dc 01       	movw	r26, r24
    19fe:	14 96       	adiw	r26, 0x04	; 4
    1a00:	ed 91       	ld	r30, X+
    1a02:	fc 91       	ld	r31, X
    1a04:	15 97       	sbiw	r26, 0x05	; 5
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	69 e0       	ldi	r22, 0x09	; 9
    1a0e:	09 95       	icall
    1a10:	08 95       	ret

00001a12 <u8x8_InitDisplay>:
    1a12:	dc 01       	movw	r26, r24
    1a14:	14 96       	adiw	r26, 0x04	; 4
    1a16:	ed 91       	ld	r30, X+
    1a18:	fc 91       	ld	r31, X
    1a1a:	15 97       	sbiw	r26, 0x05	; 5
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	6a e0       	ldi	r22, 0x0A	; 10
    1a24:	09 95       	icall
    1a26:	08 95       	ret

00001a28 <u8x8_SetPowerSave>:
    1a28:	46 2f       	mov	r20, r22
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	14 96       	adiw	r26, 0x04	; 4
    1a2e:	ed 91       	ld	r30, X+
    1a30:	fc 91       	ld	r31, X
    1a32:	15 97       	sbiw	r26, 0x05	; 5
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	6b e0       	ldi	r22, 0x0B	; 11
    1a3a:	09 95       	icall
    1a3c:	08 95       	ret

00001a3e <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    1a3e:	dc 01       	movw	r26, r24
    1a40:	14 96       	adiw	r26, 0x04	; 4
    1a42:	ed 91       	ld	r30, X+
    1a44:	fc 91       	ld	r31, X
    1a46:	15 97       	sbiw	r26, 0x05	; 5
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	60 e1       	ldi	r22, 0x10	; 16
    1a50:	09 95       	icall
    1a52:	08 95       	ret

00001a54 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	8c 01       	movw	r16, r24
    1a62:	c4 2f       	mov	r28, r20
    1a64:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    1a66:	6d 30       	cpi	r22, 0x0D	; 13
    1a68:	b9 f0       	breq	.+46     	; 0x1a98 <u8x8_d_ssd1306_sh1106_generic+0x44>
    1a6a:	18 f4       	brcc	.+6      	; 0x1a72 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    1a6c:	6b 30       	cpi	r22, 0x0B	; 11
    1a6e:	31 f0       	breq	.+12     	; 0x1a7c <u8x8_d_ssd1306_sh1106_generic+0x28>
    1a70:	72 c0       	rjmp	.+228    	; 0x1b56 <u8x8_d_ssd1306_sh1106_generic+0x102>
    1a72:	6e 30       	cpi	r22, 0x0E	; 14
    1a74:	69 f1       	breq	.+90     	; 0x1ad0 <u8x8_d_ssd1306_sh1106_generic+0x7c>
    1a76:	6f 30       	cpi	r22, 0x0F	; 15
    1a78:	d1 f1       	breq	.+116    	; 0x1aee <u8x8_d_ssd1306_sh1106_generic+0x9a>
    1a7a:	6d c0       	rjmp	.+218    	; 0x1b56 <u8x8_d_ssd1306_sh1106_generic+0x102>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    1a7c:	41 11       	cpse	r20, r1
    1a7e:	06 c0       	rjmp	.+12     	; 0x1a8c <u8x8_d_ssd1306_sh1106_generic+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    1a80:	61 e3       	ldi	r22, 0x31	; 49
    1a82:	71 e0       	ldi	r23, 0x01	; 1
    1a84:	0e 94 08 0c 	call	0x1810	; 0x1810 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	66 c0       	rjmp	.+204    	; 0x1b58 <u8x8_d_ssd1306_sh1106_generic+0x104>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    1a8c:	6c e2       	ldi	r22, 0x2C	; 44
    1a8e:	71 e0       	ldi	r23, 0x01	; 1
    1a90:	0e 94 08 0c 	call	0x1810	; 0x1810 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	60 c0       	rjmp	.+192    	; 0x1b58 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    1a98:	41 11       	cpse	r20, r1
    1a9a:	0d c0       	rjmp	.+26     	; 0x1ab6 <u8x8_d_ssd1306_sh1106_generic+0x62>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    1a9c:	65 e2       	ldi	r22, 0x25	; 37
    1a9e:	71 e0       	ldi	r23, 0x01	; 1
    1aa0:	0e 94 08 0c 	call	0x1810	; 0x1810 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    1aa4:	d8 01       	movw	r26, r16
    1aa6:	ed 91       	ld	r30, X+
    1aa8:	fc 91       	ld	r31, X
    1aaa:	11 97       	sbiw	r26, 0x01	; 1
    1aac:	82 89       	ldd	r24, Z+18	; 0x12
    1aae:	54 96       	adiw	r26, 0x14	; 20
    1ab0:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	51 c0       	rjmp	.+162    	; 0x1b58 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    1ab6:	6e e1       	ldi	r22, 0x1E	; 30
    1ab8:	71 e0       	ldi	r23, 0x01	; 1
    1aba:	0e 94 08 0c 	call	0x1810	; 0x1810 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    1abe:	d8 01       	movw	r26, r16
    1ac0:	ed 91       	ld	r30, X+
    1ac2:	fc 91       	ld	r31, X
    1ac4:	11 97       	sbiw	r26, 0x01	; 1
    1ac6:	83 89       	ldd	r24, Z+19	; 0x13
    1ac8:	54 96       	adiw	r26, 0x14	; 20
    1aca:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	44 c0       	rjmp	.+136    	; 0x1b58 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    1ad0:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    1ad4:	61 e8       	ldi	r22, 0x81	; 129
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    1adc:	6c 2f       	mov	r22, r28
    1ade:	c8 01       	movw	r24, r16
    1ae0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    1aec:	35 c0       	rjmp	.+106    	; 0x1b58 <u8x8_d_ssd1306_sh1106_generic+0x104>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    1aee:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    1af2:	f7 01       	movw	r30, r14
    1af4:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    1af6:	dd 0f       	add	r29, r29
    1af8:	dd 0f       	add	r29, r29
    1afa:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    1afc:	d8 01       	movw	r26, r16
    1afe:	54 96       	adiw	r26, 0x14	; 20
    1b00:	8c 91       	ld	r24, X
    1b02:	d8 0f       	add	r29, r24
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    1b04:	60 e4       	ldi	r22, 0x40	; 64
    1b06:	c8 01       	movw	r24, r16
    1b08:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    1b0c:	6d 2f       	mov	r22, r29
    1b0e:	62 95       	swap	r22
    1b10:	6f 70       	andi	r22, 0x0F	; 15
    1b12:	60 61       	ori	r22, 0x10	; 16
    1b14:	c8 01       	movw	r24, r16
    1b16:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    1b1a:	6d 2f       	mov	r22, r29
    1b1c:	6f 70       	andi	r22, 0x0F	; 15
    1b1e:	c8 01       	movw	r24, r16
    1b20:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    1b24:	f7 01       	movw	r30, r14
    1b26:	64 81       	ldd	r22, Z+4	; 0x04
    1b28:	60 6b       	ori	r22, 0xB0	; 176
    1b2a:	c8 01       	movw	r24, r16
    1b2c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <u8x8_cad_SendArg>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    1b30:	d7 01       	movw	r26, r14
    1b32:	4d 91       	ld	r20, X+
    1b34:	5c 91       	ld	r21, X
    1b36:	11 97       	sbiw	r26, 0x01	; 1
    1b38:	12 96       	adiw	r26, 0x02	; 2
    1b3a:	6c 91       	ld	r22, X
    1b3c:	66 0f       	add	r22, r22
    1b3e:	66 0f       	add	r22, r22
    1b40:	66 0f       	add	r22, r22
    1b42:	c8 01       	movw	r24, r16
    1b44:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    1b48:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    1b4a:	91 f7       	brne	.-28     	; 0x1b30 <u8x8_d_ssd1306_sh1106_generic+0xdc>
      
      u8x8_cad_EndTransfer(u8x8);
    1b4c:	c8 01       	movw	r24, r16
    1b4e:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    1b54:	01 c0       	rjmp	.+2      	; 0x1b58 <u8x8_d_ssd1306_sh1106_generic+0x104>
    default:
      return 0;
    1b56:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	ff 90       	pop	r15
    1b62:	ef 90       	pop	r14
    1b64:	08 95       	ret

00001b66 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	cf 93       	push	r28
    1b6c:	8c 01       	movw	r16, r24
    1b6e:	c6 2f       	mov	r28, r22
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    1b70:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <u8x8_d_ssd1306_sh1106_generic>
    1b74:	81 11       	cpse	r24, r1
    1b76:	15 c0       	rjmp	.+42     	; 0x1ba2 <u8x8_d_ssd1306_128x64_noname+0x3c>
    return 1;
  
  switch(msg)
    1b78:	c9 30       	cpi	r28, 0x09	; 9
    1b7a:	61 f0       	breq	.+24     	; 0x1b94 <u8x8_d_ssd1306_128x64_noname+0x2e>
    1b7c:	ca 30       	cpi	r28, 0x0A	; 10
    1b7e:	91 f4       	brne	.+36     	; 0x1ba4 <u8x8_d_ssd1306_128x64_noname+0x3e>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    1b80:	c8 01       	movw	r24, r16
    1b82:	0e 94 a2 0c 	call	0x1944	; 0x1944 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    1b86:	66 e3       	ldi	r22, 0x36	; 54
    1b88:	71 e0       	ldi	r23, 0x01	; 1
    1b8a:	c8 01       	movw	r24, r16
    1b8c:	0e 94 08 0c 	call	0x1810	; 0x1810 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    1b92:	08 c0       	rjmp	.+16     	; 0x1ba4 <u8x8_d_ssd1306_128x64_noname+0x3e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    1b94:	66 e0       	ldi	r22, 0x06	; 6
    1b96:	71 e0       	ldi	r23, 0x01	; 1
    1b98:	c8 01       	movw	r24, r16
    1b9a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    1ba0:	01 c0       	rjmp	.+2      	; 0x1ba4 <u8x8_d_ssd1306_128x64_noname+0x3e>

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	08 95       	ret

00001bac <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    1bac:	dc 01       	movw	r26, r24
    1bae:	1a 96       	adiw	r26, 0x0a	; 10
    1bb0:	ed 91       	ld	r30, X+
    1bb2:	fc 91       	ld	r31, X
    1bb4:	1b 97       	sbiw	r26, 0x0b	; 11
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	09 95       	icall
    1bbc:	08 95       	ret

00001bbe <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	08 95       	ret

00001bc2 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    1bc2:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    1bc4:	11 82       	std	Z+1, r1	; 0x01
    1bc6:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    1bc8:	8f ed       	ldi	r24, 0xDF	; 223
    1bca:	9d e0       	ldi	r25, 0x0D	; 13
    1bcc:	95 83       	std	Z+5, r25	; 0x05
    1bce:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    1bd0:	97 83       	std	Z+7, r25	; 0x07
    1bd2:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    1bd4:	91 87       	std	Z+9, r25	; 0x09
    1bd6:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    1bd8:	93 87       	std	Z+11, r25	; 0x0b
    1bda:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    1bdc:	15 8a       	std	Z+21, r1	; 0x15
    u8x8->device_address = 0;
    1bde:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    1be0:	11 8e       	std	Z+25, r1	; 0x19
    u8x8->bus_clock = 0;		/* issue 769 */
    1be2:	14 86       	std	Z+12, r1	; 0x0c
    1be4:	15 86       	std	Z+13, r1	; 0x0d
    1be6:	16 86       	std	Z+14, r1	; 0x0e
    1be8:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    1bea:	8f ef       	ldi	r24, 0xFF	; 255
    1bec:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    1bee:	83 8f       	std	Z+27, r24	; 0x1b
    1bf0:	08 95       	ret

00001bf2 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1bf2:	af 92       	push	r10
    1bf4:	bf 92       	push	r11
    1bf6:	cf 92       	push	r12
    1bf8:	df 92       	push	r13
    1bfa:	ef 92       	push	r14
    1bfc:	ff 92       	push	r15
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	ec 01       	movw	r28, r24
    1c08:	5b 01       	movw	r10, r22
    1c0a:	6a 01       	movw	r12, r20
    1c0c:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    1c0e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    1c12:	bd 82       	std	Y+5, r11	; 0x05
    1c14:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    1c16:	df 82       	std	Y+7, r13	; 0x07
    1c18:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    1c1a:	f9 86       	std	Y+9, r15	; 0x09
    1c1c:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    1c1e:	1b 87       	std	Y+11, r17	; 0x0b
    1c20:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    1c22:	ce 01       	movw	r24, r28
    1c24:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <u8x8_SetupMemory>
}
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	ff 90       	pop	r15
    1c32:	ef 90       	pop	r14
    1c34:	df 90       	pop	r13
    1c36:	cf 90       	pop	r12
    1c38:	bf 90       	pop	r11
    1c3a:	af 90       	pop	r10
    1c3c:	08 95       	ret

00001c3e <main>:
u8g2_t u8g2;

int main(void)
{
	/* Call init function with all modules */
	Init_Main();
    1c3e:	0e 94 b1 04 	call	0x962	; 0x962 <Init_Main>
	
    /* Replace with your application code */
    while (1) 
    {
		u8g2_ClearBuffer(&u8g2);
    1c42:	84 e7       	ldi	r24, 0x74	; 116
    1c44:	95 e0       	ldi	r25, 0x05	; 5
    1c46:	0e 94 00 05 	call	0xa00	; 0xa00 <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_helvR08_tf  );
    1c4a:	68 e6       	ldi	r22, 0x68	; 104
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	84 e7       	ldi	r24, 0x74	; 116
    1c50:	95 e0       	ldi	r25, 0x05	; 5
    1c52:	0e 94 0f 09 	call	0x121e	; 0x121e <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 40, 30, "oLog GPS"); 
    1c56:	2b e6       	ldi	r18, 0x6B	; 107
    1c58:	31 e0       	ldi	r19, 0x01	; 1
    1c5a:	4e e1       	ldi	r20, 0x1E	; 30
    1c5c:	68 e2       	ldi	r22, 0x28	; 40
    1c5e:	84 e7       	ldi	r24, 0x74	; 116
    1c60:	95 e0       	ldi	r25, 0x05	; 5
    1c62:	0e 94 bc 08 	call	0x1178	; 0x1178 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
    1c66:	84 e7       	ldi	r24, 0x74	; 116
    1c68:	95 e0       	ldi	r25, 0x05	; 5
    1c6a:	0e 94 16 05 	call	0xa2c	; 0xa2c <u8g2_SendBuffer>
    1c6e:	e9 cf       	rjmp	.-46     	; 0x1c42 <main+0x4>

00001c70 <u8x8_avr_delay>:

uint8_t u8x8_avr_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
	uint8_t cycles;

	switch(msg)
    1c70:	6a 32       	cpi	r22, 0x2A	; 42
    1c72:	51 f0       	breq	.+20     	; 0x1c88 <u8x8_avr_delay+0x18>
    1c74:	18 f4       	brcc	.+6      	; 0x1c7c <u8x8_avr_delay+0xc>
    1c76:	69 32       	cpi	r22, 0x29	; 41
    1c78:	69 f0       	breq	.+26     	; 0x1c94 <u8x8_avr_delay+0x24>
    1c7a:	3f c0       	rjmp	.+126    	; 0x1cfa <u8x8_avr_delay+0x8a>
    1c7c:	6b 32       	cpi	r22, 0x2B	; 43
    1c7e:	81 f0       	breq	.+32     	; 0x1ca0 <u8x8_avr_delay+0x30>
    1c80:	6c 32       	cpi	r22, 0x2C	; 44
    1c82:	d9 f5       	brne	.+118    	; 0x1cfa <u8x8_avr_delay+0x8a>
		}break;
		
		default:
			return 0;
	}
	return 1;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	08 95       	ret
			);
		}break;
		
		case U8X8_MSG_DELAY_10MICRO:    // delay arg_int * 10 micro seconds
		{
			for(int i=0 ; i < arg_int ; i++)
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	14 16       	cp	r1, r20
    1c8c:	15 06       	cpc	r1, r21
    1c8e:	dc f0       	brlt	.+54     	; 0x1cc6 <u8x8_avr_delay+0x56>
		}break;
		
		default:
			return 0;
	}
	return 1;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	08 95       	ret
				_delay_us(10);
		}break;
		
		case U8X8_MSG_DELAY_MILLI:      // delay arg_int * 1 milli second
		{
			for(int i=0 ; i < arg_int ; i++)
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	14 16       	cp	r1, r20
    1c98:	15 06       	cpc	r1, r21
    1c9a:	0c f1       	brlt	.+66     	; 0x1cde <u8x8_avr_delay+0x6e>
		}break;
		
		default:
			return 0;
	}
	return 1;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	08 95       	ret
		} break;

		case U8X8_MSG_DELAY_100NANO:    // delay arg_int * 100 nano seconds
		{
			// Approximate best case values...
			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    1ca0:	24 2f       	mov	r18, r20
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	a4 e6       	ldi	r26, 0x64	; 100
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__umulhisi3>
    1cac:	28 ef       	ldi	r18, 0xF8	; 248
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__udivmodsi4>

			if(cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    1cb8:	23 32       	cpi	r18, 0x23	; 35
    1cba:	08 f5       	brcc	.+66     	; 0x1cfe <u8x8_avr_delay+0x8e>
				break;

			__asm__ __volatile__ (
    1cbc:	82 2f       	mov	r24, r18
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <u8x8_avr_delay+0x4e>
		}break;
		
		default:
			return 0;
	}
	return 1;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1

			__asm__ __volatile__ (
				"1: sbiw %0,1" "\n\t" // 2 cycles
				"brne 1b" : "=w" (cycles) : "0" (cycles) // 2 cycles
			);
		}break;
    1cc4:	08 95       	ret
		
		case U8X8_MSG_DELAY_10MICRO:    // delay arg_int * 10 micro seconds
		{
			for(int i=0 ; i < arg_int ; i++)
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cca:	25 e3       	ldi	r18, 0x35	; 53
    1ccc:	2a 95       	dec	r18
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <u8x8_avr_delay+0x5c>
    1cd0:	00 00       	nop
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	84 17       	cp	r24, r20
    1cd6:	95 07       	cpc	r25, r21
    1cd8:	c1 f7       	brne	.-16     	; 0x1cca <u8x8_avr_delay+0x5a>
		}break;
		
		default:
			return 0;
	}
	return 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	08 95       	ret
				_delay_us(10);
		}break;
		
		case U8X8_MSG_DELAY_MILLI:      // delay arg_int * 1 milli second
		{
			for(int i=0 ; i < arg_int ; i++)
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ce2:	ef e9       	ldi	r30, 0x9F	; 159
    1ce4:	ff e0       	ldi	r31, 0x0F	; 15
    1ce6:	31 97       	sbiw	r30, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <u8x8_avr_delay+0x76>
    1cea:	00 c0       	rjmp	.+0      	; 0x1cec <u8x8_avr_delay+0x7c>
    1cec:	00 00       	nop
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	84 17       	cp	r24, r20
    1cf2:	95 07       	cpc	r25, r21
    1cf4:	b1 f7       	brne	.-20     	; 0x1ce2 <u8x8_avr_delay+0x72>
		}break;
		
		default:
			return 0;
	}
	return 1;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	08 95       	ret
			for(int i=0 ; i < arg_int ; i++)
				_delay_ms(1);
		}break;
		
		default:
			return 0;
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	08 95       	ret
	}
	return 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
}
    1d00:	08 95       	ret

00001d02 <u8x8_avr_gpio_and_delay>:


uint8_t u8x8_avr_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
	// Re-use library for delays

	switch(msg)
    1d06:	61 34       	cpi	r22, 0x41	; 65
    1d08:	c9 f0       	breq	.+50     	; 0x1d3c <u8x8_avr_gpio_and_delay+0x3a>
    1d0a:	28 f4       	brcc	.+10     	; 0x1d16 <u8x8_avr_gpio_and_delay+0x14>
    1d0c:	68 32       	cpi	r22, 0x28	; 40
    1d0e:	51 f0       	breq	.+20     	; 0x1d24 <u8x8_avr_gpio_and_delay+0x22>
    1d10:	60 34       	cpi	r22, 0x40	; 64
    1d12:	71 f0       	breq	.+28     	; 0x1d30 <u8x8_avr_gpio_and_delay+0x2e>
    1d14:	2b c0       	rjmp	.+86     	; 0x1d6c <u8x8_avr_gpio_and_delay+0x6a>
    1d16:	6a 34       	cpi	r22, 0x4A	; 74
    1d18:	e9 f0       	breq	.+58     	; 0x1d54 <u8x8_avr_gpio_and_delay+0x52>
    1d1a:	6b 34       	cpi	r22, 0x4B	; 75
    1d1c:	09 f1       	breq	.+66     	; 0x1d60 <u8x8_avr_gpio_and_delay+0x5e>
    1d1e:	69 34       	cpi	r22, 0x49	; 73
    1d20:	29 f5       	brne	.+74     	; 0x1d6c <u8x8_avr_gpio_and_delay+0x6a>
    1d22:	12 c0       	rjmp	.+36     	; 0x1d48 <u8x8_avr_gpio_and_delay+0x46>
	{
		case U8X8_MSG_GPIO_AND_DELAY_INIT:  // called once during init phase of u8g2/u8x8
		{
			DISPLAY_CLK_DIR |= 1<<DISPLAY_CLK_PIN;
    1d24:	25 9a       	sbi	0x04, 5	; 4
			DISPLAY_DATA_DIR |= 1<<DISPLAY_DATA_PIN;
    1d26:	23 9a       	sbi	0x04, 3	; 4
			DISPLAY_CS_DIR |= 1<<DISPLAY_CS_PIN;
    1d28:	22 9a       	sbi	0x04, 2	; 4
			DISPLAY_DC_DIR |= 1<<DISPLAY_DC_PIN;
    1d2a:	21 9a       	sbi	0x04, 1	; 4
			DISPLAY_RESET_DIR |= 1<<DISPLAY_RESET_PIN;
    1d2c:	20 9a       	sbi	0x04, 0	; 4
		}break;              // can be used to setup pins
    1d2e:	25 c0       	rjmp	.+74     	; 0x1d7a <u8x8_avr_gpio_and_delay+0x78>
		
		case U8X8_MSG_GPIO_SPI_CLOCK:        // Clock pin: Output level in arg_int
		{
			if(arg_int)
    1d30:	44 23       	and	r20, r20
    1d32:	11 f0       	breq	.+4      	; 0x1d38 <u8x8_avr_gpio_and_delay+0x36>
				DISPLAY_CLK_PORT |= (1<<DISPLAY_CLK_PIN);
    1d34:	2d 9a       	sbi	0x05, 5	; 5
    1d36:	21 c0       	rjmp	.+66     	; 0x1d7a <u8x8_avr_gpio_and_delay+0x78>
			else
				DISPLAY_CLK_PORT &= ~(1<<DISPLAY_CLK_PIN);
    1d38:	2d 98       	cbi	0x05, 5	; 5
    1d3a:	1f c0       	rjmp	.+62     	; 0x1d7a <u8x8_avr_gpio_and_delay+0x78>
		}break;
		
		case U8X8_MSG_GPIO_SPI_DATA:        // MOSI pin: Output level in arg_int
		{
			if(arg_int)
    1d3c:	44 23       	and	r20, r20
    1d3e:	11 f0       	breq	.+4      	; 0x1d44 <u8x8_avr_gpio_and_delay+0x42>
				DISPLAY_DATA_PORT |= (1<<DISPLAY_DATA_PIN);
    1d40:	2b 9a       	sbi	0x05, 3	; 5
    1d42:	1b c0       	rjmp	.+54     	; 0x1d7a <u8x8_avr_gpio_and_delay+0x78>
			else
				DISPLAY_DATA_PORT &= ~(1<<DISPLAY_DATA_PIN);
    1d44:	2b 98       	cbi	0x05, 3	; 5
    1d46:	19 c0       	rjmp	.+50     	; 0x1d7a <u8x8_avr_gpio_and_delay+0x78>
		}break;
		
		case U8X8_MSG_GPIO_CS:        // CS (chip select) pin: Output level in arg_int
		{
			if(arg_int)
    1d48:	44 23       	and	r20, r20
    1d4a:	11 f0       	breq	.+4      	; 0x1d50 <u8x8_avr_gpio_and_delay+0x4e>
				DISPLAY_CS_PORT |= (1<<DISPLAY_CS_PIN);
    1d4c:	2a 9a       	sbi	0x05, 2	; 5
    1d4e:	15 c0       	rjmp	.+42     	; 0x1d7a <u8x8_avr_gpio_and_delay+0x78>
			else
				DISPLAY_CS_PORT &= ~(1<<DISPLAY_CS_PIN);
    1d50:	2a 98       	cbi	0x05, 2	; 5
    1d52:	13 c0       	rjmp	.+38     	; 0x1d7a <u8x8_avr_gpio_and_delay+0x78>
		}break;
		
		case U8X8_MSG_GPIO_DC:        // DC (data/cmd, A0, register select) pin: Output level in arg_int
		{
			if(arg_int)
    1d54:	44 23       	and	r20, r20
    1d56:	11 f0       	breq	.+4      	; 0x1d5c <u8x8_avr_gpio_and_delay+0x5a>
			DISPLAY_DC_PORT |= (1<<DISPLAY_DC_PIN);
    1d58:	29 9a       	sbi	0x05, 1	; 5
    1d5a:	0f c0       	rjmp	.+30     	; 0x1d7a <u8x8_avr_gpio_and_delay+0x78>
			else
			DISPLAY_DC_PORT &= ~(1<<DISPLAY_DC_PIN);
    1d5c:	29 98       	cbi	0x05, 1	; 5
    1d5e:	0d c0       	rjmp	.+26     	; 0x1d7a <u8x8_avr_gpio_and_delay+0x78>
		}break;
		
		case U8X8_MSG_GPIO_RESET:     // Reset pin: Output level in arg_int
		{
			if(arg_int)
    1d60:	44 23       	and	r20, r20
    1d62:	11 f0       	breq	.+4      	; 0x1d68 <u8x8_avr_gpio_and_delay+0x66>
			DISPLAY_RESET_PORT |= (1<<DISPLAY_RESET_PIN);
    1d64:	28 9a       	sbi	0x05, 0	; 5
    1d66:	09 c0       	rjmp	.+18     	; 0x1d7a <u8x8_avr_gpio_and_delay+0x78>
			else
			DISPLAY_RESET_PORT &= ~(1<<DISPLAY_RESET_PIN);
    1d68:	28 98       	cbi	0x05, 0	; 5
    1d6a:	07 c0       	rjmp	.+14     	; 0x1d7a <u8x8_avr_gpio_and_delay+0x78>
    1d6c:	ec 01       	movw	r28, r24
		}break;
		
		default:
		{
			if (u8x8_avr_delay(u8x8, msg, arg_int, arg_ptr))	// check for any delay msgs
    1d6e:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <u8x8_avr_delay>
    1d72:	81 11       	cpse	r24, r1
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <u8x8_avr_gpio_and_delay+0x78>
			return 1;
			u8x8_SetGPIOResult(u8x8, 1);      // default return value
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	8a 8f       	std	Y+26, r24	; 0x1a
		}break;	
	}
	return 1;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	08 95       	ret

00001d82 <__udivmodsi4>:
    1d82:	a1 e2       	ldi	r26, 0x21	; 33
    1d84:	1a 2e       	mov	r1, r26
    1d86:	aa 1b       	sub	r26, r26
    1d88:	bb 1b       	sub	r27, r27
    1d8a:	fd 01       	movw	r30, r26
    1d8c:	0d c0       	rjmp	.+26     	; 0x1da8 <__udivmodsi4_ep>

00001d8e <__udivmodsi4_loop>:
    1d8e:	aa 1f       	adc	r26, r26
    1d90:	bb 1f       	adc	r27, r27
    1d92:	ee 1f       	adc	r30, r30
    1d94:	ff 1f       	adc	r31, r31
    1d96:	a2 17       	cp	r26, r18
    1d98:	b3 07       	cpc	r27, r19
    1d9a:	e4 07       	cpc	r30, r20
    1d9c:	f5 07       	cpc	r31, r21
    1d9e:	20 f0       	brcs	.+8      	; 0x1da8 <__udivmodsi4_ep>
    1da0:	a2 1b       	sub	r26, r18
    1da2:	b3 0b       	sbc	r27, r19
    1da4:	e4 0b       	sbc	r30, r20
    1da6:	f5 0b       	sbc	r31, r21

00001da8 <__udivmodsi4_ep>:
    1da8:	66 1f       	adc	r22, r22
    1daa:	77 1f       	adc	r23, r23
    1dac:	88 1f       	adc	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	1a 94       	dec	r1
    1db2:	69 f7       	brne	.-38     	; 0x1d8e <__udivmodsi4_loop>
    1db4:	60 95       	com	r22
    1db6:	70 95       	com	r23
    1db8:	80 95       	com	r24
    1dba:	90 95       	com	r25
    1dbc:	9b 01       	movw	r18, r22
    1dbe:	ac 01       	movw	r20, r24
    1dc0:	bd 01       	movw	r22, r26
    1dc2:	cf 01       	movw	r24, r30
    1dc4:	08 95       	ret

00001dc6 <__umulhisi3>:
    1dc6:	a2 9f       	mul	r26, r18
    1dc8:	b0 01       	movw	r22, r0
    1dca:	b3 9f       	mul	r27, r19
    1dcc:	c0 01       	movw	r24, r0
    1dce:	a3 9f       	mul	r26, r19
    1dd0:	70 0d       	add	r23, r0
    1dd2:	81 1d       	adc	r24, r1
    1dd4:	11 24       	eor	r1, r1
    1dd6:	91 1d       	adc	r25, r1
    1dd8:	b2 9f       	mul	r27, r18
    1dda:	70 0d       	add	r23, r0
    1ddc:	81 1d       	adc	r24, r1
    1dde:	11 24       	eor	r1, r1
    1de0:	91 1d       	adc	r25, r1
    1de2:	08 95       	ret

00001de4 <memset>:
    1de4:	dc 01       	movw	r26, r24
    1de6:	01 c0       	rjmp	.+2      	; 0x1dea <memset+0x6>
    1de8:	6d 93       	st	X+, r22
    1dea:	41 50       	subi	r20, 0x01	; 1
    1dec:	50 40       	sbci	r21, 0x00	; 0
    1dee:	e0 f7       	brcc	.-8      	; 0x1de8 <memset+0x4>
    1df0:	08 95       	ret

00001df2 <_exit>:
    1df2:	f8 94       	cli

00001df4 <__stop_program>:
    1df4:	ff cf       	rjmp	.-2      	; 0x1df4 <__stop_program>
